
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.14.0
 * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
 */
Prisma.prismaVersion = {
  client: "3.14.0",
  engine: "2b0c12756921c891fec4f68d9444e18c7d5d4a6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  phoneNumber: 'phoneNumber',
  picture: 'picture',
  tradeLink: 'tradeLink',
  isAdmin: 'isAdmin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  saldo: 'saldo',
  twitchId: 'twitchId',
  passwordResetToken: 'passwordResetToken',
  tokenExpiration: 'tokenExpiration'
});

exports.Prisma.RaffleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  value: 'value',
  is_active: 'is_active',
  users_quantity: 'users_quantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  free: 'free'
});

exports.Prisma.RaffleSkinScalarFieldEnum = makeEnum({
  id: 'id',
  raffle_id: 'raffle_id',
  skin_id: 'skin_id',
  winner_id: 'winner_id',
  skinName: 'skinName',
  skinValue: 'skinValue',
  skinType: 'skinType',
  skinPicture: 'skinPicture'
});

exports.Prisma.ParticipantScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  raffle_id: 'raffle_id',
  number: 'number'
});

exports.Prisma.SkinScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  value: 'value',
  type: 'type',
  picture: 'picture'
});

exports.Prisma.SessionScalarFieldEnum = makeEnum({
  id: 'id',
  token: 'token',
  user_id: 'user_id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.TransactionScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  paymentId: 'paymentId',
  status: 'status',
  status_detail: 'status_detail',
  paymentMethod: 'paymentMethod',
  transactionAmount: 'transactionAmount',
  dateCreated: 'dateCreated',
  dateApproved: 'dateApproved',
  dateLastUpdated: 'dateLastUpdated',
  type: 'type',
  raffle_id: 'raffle_id',
  qrCode: 'qrCode',
  qrCodeBase64: 'qrCodeBase64'
});

exports.Prisma.TextScalarFieldEnum = makeEnum({
  id: 'id',
  text: 'text'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  User: 'User',
  Raffle: 'Raffle',
  RaffleSkin: 'RaffleSkin',
  Participant: 'Participant',
  Skin: 'Skin',
  Session: 'Session',
  Transaction: 'Transaction',
  Text: 'Text'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
