
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  email: string
  name: string
  password: string | null
  phoneNumber: string | null
  picture: string | null
  tradeLink: string | null
  isAdmin: boolean
  createdAt: Date
  updatedAt: Date
  saldo: number | null
  twitchId: string | null
  passwordResetToken: string | null
  tokenExpiration: Date | null
}

/**
 * Model Raffle
 * 
 */
export type Raffle = {
  id: number
  name: string
  value: number
  is_active: string
  users_quantity: number
  createdAt: Date
  updatedAt: Date
  free: boolean | null
}

/**
 * Model RaffleSkin
 * 
 */
export type RaffleSkin = {
  id: number
  raffle_id: number
  skin_id: number
  winner_id: number | null
  skinName: string
  skinValue: number
  skinType: string
  skinPicture: string
}

/**
 * Model Participant
 * 
 */
export type Participant = {
  id: number
  user_id: number
  raffle_id: number
  number: number
}

/**
 * Model Skin
 * 
 */
export type Skin = {
  id: number
  name: string
  value: number
  type: string
  picture: string
}

/**
 * Model Session
 * 
 */
export type Session = {
  id: number
  token: string
  user_id: number
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Transaction
 * 
 */
export type Transaction = {
  id: number
  user_id: number
  paymentId: string | null
  status: string
  status_detail: string | null
  paymentMethod: string
  transactionAmount: number
  dateCreated: Date
  dateApproved: Date | null
  dateLastUpdated: Date
  type: string
  raffle_id: number | null
  qrCode: string | null
  qrCodeBase64: string | null
}

/**
 * Model Text
 * 
 */
export type Text = {
  id: number
  text: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.raffle`: Exposes CRUD operations for the **Raffle** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Raffles
    * const raffles = await prisma.raffle.findMany()
    * ```
    */
  get raffle(): Prisma.RaffleDelegate<GlobalReject>;

  /**
   * `prisma.raffleSkin`: Exposes CRUD operations for the **RaffleSkin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RaffleSkins
    * const raffleSkins = await prisma.raffleSkin.findMany()
    * ```
    */
  get raffleSkin(): Prisma.RaffleSkinDelegate<GlobalReject>;

  /**
   * `prisma.participant`: Exposes CRUD operations for the **Participant** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participants
    * const participants = await prisma.participant.findMany()
    * ```
    */
  get participant(): Prisma.ParticipantDelegate<GlobalReject>;

  /**
   * `prisma.skin`: Exposes CRUD operations for the **Skin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Skins
    * const skins = await prisma.skin.findMany()
    * ```
    */
  get skin(): Prisma.SkinDelegate<GlobalReject>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<GlobalReject>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<GlobalReject>;

  /**
   * `prisma.text`: Exposes CRUD operations for the **Text** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Texts
    * const texts = await prisma.text.findMany()
    * ```
    */
  get text(): Prisma.TextDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.14.0
   * Query Engine version: 2b0c12756921c891fec4f68d9444e18c7d5d4a6a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Raffle: 'Raffle',
    RaffleSkin: 'RaffleSkin',
    Participant: 'Participant',
    Skin: 'Skin',
    Session: 'Session',
    Transaction: 'Transaction',
    Text: 'Text'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    sessions: number
    Participant: number
    transactions: number
  }

  export type UserCountOutputTypeSelect = {
    sessions?: boolean
    Participant?: boolean
    transactions?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type RaffleCountOutputType
   */


  export type RaffleCountOutputType = {
    participants: number
    raffleSkins: number
    transactions: number
  }

  export type RaffleCountOutputTypeSelect = {
    participants?: boolean
    raffleSkins?: boolean
    transactions?: boolean
  }

  export type RaffleCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RaffleCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RaffleCountOutputType
    : S extends undefined
    ? never
    : S extends RaffleCountOutputTypeArgs
    ?'include' extends U
    ? RaffleCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RaffleCountOutputType ? RaffleCountOutputType[P] : never
  } 
    : RaffleCountOutputType
  : RaffleCountOutputType




  // Custom InputTypes

  /**
   * RaffleCountOutputType without action
   */
  export type RaffleCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RaffleCountOutputType
     * 
    **/
    select?: RaffleCountOutputTypeSelect | null
  }



  /**
   * Count Type ParticipantCountOutputType
   */


  export type ParticipantCountOutputType = {
    raffleSkins: number
  }

  export type ParticipantCountOutputTypeSelect = {
    raffleSkins?: boolean
  }

  export type ParticipantCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ParticipantCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ParticipantCountOutputType
    : S extends undefined
    ? never
    : S extends ParticipantCountOutputTypeArgs
    ?'include' extends U
    ? ParticipantCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ParticipantCountOutputType ? ParticipantCountOutputType[P] : never
  } 
    : ParticipantCountOutputType
  : ParticipantCountOutputType




  // Custom InputTypes

  /**
   * ParticipantCountOutputType without action
   */
  export type ParticipantCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ParticipantCountOutputType
     * 
    **/
    select?: ParticipantCountOutputTypeSelect | null
  }



  /**
   * Count Type SkinCountOutputType
   */


  export type SkinCountOutputType = {
    raffleSkins: number
  }

  export type SkinCountOutputTypeSelect = {
    raffleSkins?: boolean
  }

  export type SkinCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SkinCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SkinCountOutputType
    : S extends undefined
    ? never
    : S extends SkinCountOutputTypeArgs
    ?'include' extends U
    ? SkinCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SkinCountOutputType ? SkinCountOutputType[P] : never
  } 
    : SkinCountOutputType
  : SkinCountOutputType




  // Custom InputTypes

  /**
   * SkinCountOutputType without action
   */
  export type SkinCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SkinCountOutputType
     * 
    **/
    select?: SkinCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    saldo: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    saldo: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    phoneNumber: string | null
    picture: string | null
    tradeLink: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    saldo: number | null
    twitchId: string | null
    passwordResetToken: string | null
    tokenExpiration: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    name: string | null
    password: string | null
    phoneNumber: string | null
    picture: string | null
    tradeLink: string | null
    isAdmin: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    saldo: number | null
    twitchId: string | null
    passwordResetToken: string | null
    tokenExpiration: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    phoneNumber: number
    picture: number
    tradeLink: number
    isAdmin: number
    createdAt: number
    updatedAt: number
    saldo: number
    twitchId: number
    passwordResetToken: number
    tokenExpiration: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    saldo?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    saldo?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    phoneNumber?: true
    picture?: true
    tradeLink?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    saldo?: true
    twitchId?: true
    passwordResetToken?: true
    tokenExpiration?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    phoneNumber?: true
    picture?: true
    tradeLink?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    saldo?: true
    twitchId?: true
    passwordResetToken?: true
    tokenExpiration?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    phoneNumber?: true
    picture?: true
    tradeLink?: true
    isAdmin?: true
    createdAt?: true
    updatedAt?: true
    saldo?: true
    twitchId?: true
    passwordResetToken?: true
    tokenExpiration?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    email: string
    name: string
    password: string | null
    phoneNumber: string | null
    picture: string | null
    tradeLink: string | null
    isAdmin: boolean
    createdAt: Date
    updatedAt: Date
    saldo: number | null
    twitchId: string | null
    passwordResetToken: string | null
    tokenExpiration: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    phoneNumber?: boolean
    picture?: boolean
    tradeLink?: boolean
    isAdmin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    saldo?: boolean
    sessions?: boolean | SessionFindManyArgs
    Participant?: boolean | ParticipantFindManyArgs
    transactions?: boolean | TransactionFindManyArgs
    twitchId?: boolean
    passwordResetToken?: boolean
    tokenExpiration?: boolean
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    sessions?: boolean | SessionFindManyArgs
    Participant?: boolean | ParticipantFindManyArgs
    transactions?: boolean | TransactionFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['include'][P]>>  :
        P extends 'Participant' ? Array < ParticipantGetPayload<S['include'][P]>>  :
        P extends 'transactions' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sessions' ? Array < SessionGetPayload<S['select'][P]>>  :
        P extends 'Participant' ? Array < ParticipantGetPayload<S['select'][P]>>  :
        P extends 'transactions' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sessions<T extends SessionFindManyArgs = {}>(args?: Subset<T, SessionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>;

    Participant<T extends ParticipantFindManyArgs = {}>(args?: Subset<T, ParticipantFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Participant>>, PrismaPromise<Array<ParticipantGetPayload<T>>>>;

    transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     * 
    **/
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Raffle
   */


  export type AggregateRaffle = {
    _count: RaffleCountAggregateOutputType | null
    _avg: RaffleAvgAggregateOutputType | null
    _sum: RaffleSumAggregateOutputType | null
    _min: RaffleMinAggregateOutputType | null
    _max: RaffleMaxAggregateOutputType | null
  }

  export type RaffleAvgAggregateOutputType = {
    id: number | null
    value: number | null
    users_quantity: number | null
  }

  export type RaffleSumAggregateOutputType = {
    id: number | null
    value: number | null
    users_quantity: number | null
  }

  export type RaffleMinAggregateOutputType = {
    id: number | null
    name: string | null
    value: number | null
    is_active: string | null
    users_quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    free: boolean | null
  }

  export type RaffleMaxAggregateOutputType = {
    id: number | null
    name: string | null
    value: number | null
    is_active: string | null
    users_quantity: number | null
    createdAt: Date | null
    updatedAt: Date | null
    free: boolean | null
  }

  export type RaffleCountAggregateOutputType = {
    id: number
    name: number
    value: number
    is_active: number
    users_quantity: number
    createdAt: number
    updatedAt: number
    free: number
    _all: number
  }


  export type RaffleAvgAggregateInputType = {
    id?: true
    value?: true
    users_quantity?: true
  }

  export type RaffleSumAggregateInputType = {
    id?: true
    value?: true
    users_quantity?: true
  }

  export type RaffleMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    is_active?: true
    users_quantity?: true
    createdAt?: true
    updatedAt?: true
    free?: true
  }

  export type RaffleMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    is_active?: true
    users_quantity?: true
    createdAt?: true
    updatedAt?: true
    free?: true
  }

  export type RaffleCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    is_active?: true
    users_quantity?: true
    createdAt?: true
    updatedAt?: true
    free?: true
    _all?: true
  }

  export type RaffleAggregateArgs = {
    /**
     * Filter which Raffle to aggregate.
     * 
    **/
    where?: RaffleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Raffles to fetch.
     * 
    **/
    orderBy?: Enumerable<RaffleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RaffleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Raffles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Raffles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Raffles
    **/
    _count?: true | RaffleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RaffleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RaffleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RaffleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RaffleMaxAggregateInputType
  }

  export type GetRaffleAggregateType<T extends RaffleAggregateArgs> = {
        [P in keyof T & keyof AggregateRaffle]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRaffle[P]>
      : GetScalarType<T[P], AggregateRaffle[P]>
  }




  export type RaffleGroupByArgs = {
    where?: RaffleWhereInput
    orderBy?: Enumerable<RaffleOrderByWithAggregationInput>
    by: Array<RaffleScalarFieldEnum>
    having?: RaffleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RaffleCountAggregateInputType | true
    _avg?: RaffleAvgAggregateInputType
    _sum?: RaffleSumAggregateInputType
    _min?: RaffleMinAggregateInputType
    _max?: RaffleMaxAggregateInputType
  }


  export type RaffleGroupByOutputType = {
    id: number
    name: string
    value: number
    is_active: string
    users_quantity: number
    createdAt: Date
    updatedAt: Date
    free: boolean | null
    _count: RaffleCountAggregateOutputType | null
    _avg: RaffleAvgAggregateOutputType | null
    _sum: RaffleSumAggregateOutputType | null
    _min: RaffleMinAggregateOutputType | null
    _max: RaffleMaxAggregateOutputType | null
  }

  type GetRaffleGroupByPayload<T extends RaffleGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RaffleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RaffleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RaffleGroupByOutputType[P]>
            : GetScalarType<T[P], RaffleGroupByOutputType[P]>
        }
      >
    >


  export type RaffleSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    is_active?: boolean
    users_quantity?: boolean
    participants?: boolean | ParticipantFindManyArgs
    raffleSkins?: boolean | RaffleSkinFindManyArgs
    transactions?: boolean | TransactionFindManyArgs
    createdAt?: boolean
    updatedAt?: boolean
    free?: boolean
    _count?: boolean | RaffleCountOutputTypeArgs
  }

  export type RaffleInclude = {
    participants?: boolean | ParticipantFindManyArgs
    raffleSkins?: boolean | RaffleSkinFindManyArgs
    transactions?: boolean | TransactionFindManyArgs
    _count?: boolean | RaffleCountOutputTypeArgs
  }

  export type RaffleGetPayload<
    S extends boolean | null | undefined | RaffleArgs,
    U = keyof S
      > = S extends true
        ? Raffle
    : S extends undefined
    ? never
    : S extends RaffleArgs | RaffleFindManyArgs
    ?'include' extends U
    ? Raffle  & {
    [P in TrueKeys<S['include']>]:
        P extends 'participants' ? Array < ParticipantGetPayload<S['include'][P]>>  :
        P extends 'raffleSkins' ? Array < RaffleSkinGetPayload<S['include'][P]>>  :
        P extends 'transactions' ? Array < TransactionGetPayload<S['include'][P]>>  :
        P extends '_count' ? RaffleCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'participants' ? Array < ParticipantGetPayload<S['select'][P]>>  :
        P extends 'raffleSkins' ? Array < RaffleSkinGetPayload<S['select'][P]>>  :
        P extends 'transactions' ? Array < TransactionGetPayload<S['select'][P]>>  :
        P extends '_count' ? RaffleCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Raffle ? Raffle[P] : never
  } 
    : Raffle
  : Raffle


  type RaffleCountArgs = Merge<
    Omit<RaffleFindManyArgs, 'select' | 'include'> & {
      select?: RaffleCountAggregateInputType | true
    }
  >

  export interface RaffleDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Raffle that matches the filter.
     * @param {RaffleFindUniqueArgs} args - Arguments to find a Raffle
     * @example
     * // Get one Raffle
     * const raffle = await prisma.raffle.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RaffleFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RaffleFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Raffle'> extends True ? CheckSelect<T, Prisma__RaffleClient<Raffle>, Prisma__RaffleClient<RaffleGetPayload<T>>> : CheckSelect<T, Prisma__RaffleClient<Raffle | null >, Prisma__RaffleClient<RaffleGetPayload<T> | null >>

    /**
     * Find the first Raffle that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleFindFirstArgs} args - Arguments to find a Raffle
     * @example
     * // Get one Raffle
     * const raffle = await prisma.raffle.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RaffleFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RaffleFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Raffle'> extends True ? CheckSelect<T, Prisma__RaffleClient<Raffle>, Prisma__RaffleClient<RaffleGetPayload<T>>> : CheckSelect<T, Prisma__RaffleClient<Raffle | null >, Prisma__RaffleClient<RaffleGetPayload<T> | null >>

    /**
     * Find zero or more Raffles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Raffles
     * const raffles = await prisma.raffle.findMany()
     * 
     * // Get first 10 Raffles
     * const raffles = await prisma.raffle.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const raffleWithIdOnly = await prisma.raffle.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RaffleFindManyArgs>(
      args?: SelectSubset<T, RaffleFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Raffle>>, PrismaPromise<Array<RaffleGetPayload<T>>>>

    /**
     * Create a Raffle.
     * @param {RaffleCreateArgs} args - Arguments to create a Raffle.
     * @example
     * // Create one Raffle
     * const Raffle = await prisma.raffle.create({
     *   data: {
     *     // ... data to create a Raffle
     *   }
     * })
     * 
    **/
    create<T extends RaffleCreateArgs>(
      args: SelectSubset<T, RaffleCreateArgs>
    ): CheckSelect<T, Prisma__RaffleClient<Raffle>, Prisma__RaffleClient<RaffleGetPayload<T>>>

    /**
     * Create many Raffles.
     *     @param {RaffleCreateManyArgs} args - Arguments to create many Raffles.
     *     @example
     *     // Create many Raffles
     *     const raffle = await prisma.raffle.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RaffleCreateManyArgs>(
      args?: SelectSubset<T, RaffleCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Raffle.
     * @param {RaffleDeleteArgs} args - Arguments to delete one Raffle.
     * @example
     * // Delete one Raffle
     * const Raffle = await prisma.raffle.delete({
     *   where: {
     *     // ... filter to delete one Raffle
     *   }
     * })
     * 
    **/
    delete<T extends RaffleDeleteArgs>(
      args: SelectSubset<T, RaffleDeleteArgs>
    ): CheckSelect<T, Prisma__RaffleClient<Raffle>, Prisma__RaffleClient<RaffleGetPayload<T>>>

    /**
     * Update one Raffle.
     * @param {RaffleUpdateArgs} args - Arguments to update one Raffle.
     * @example
     * // Update one Raffle
     * const raffle = await prisma.raffle.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RaffleUpdateArgs>(
      args: SelectSubset<T, RaffleUpdateArgs>
    ): CheckSelect<T, Prisma__RaffleClient<Raffle>, Prisma__RaffleClient<RaffleGetPayload<T>>>

    /**
     * Delete zero or more Raffles.
     * @param {RaffleDeleteManyArgs} args - Arguments to filter Raffles to delete.
     * @example
     * // Delete a few Raffles
     * const { count } = await prisma.raffle.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RaffleDeleteManyArgs>(
      args?: SelectSubset<T, RaffleDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Raffles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Raffles
     * const raffle = await prisma.raffle.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RaffleUpdateManyArgs>(
      args: SelectSubset<T, RaffleUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Raffle.
     * @param {RaffleUpsertArgs} args - Arguments to update or create a Raffle.
     * @example
     * // Update or create a Raffle
     * const raffle = await prisma.raffle.upsert({
     *   create: {
     *     // ... data to create a Raffle
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Raffle we want to update
     *   }
     * })
    **/
    upsert<T extends RaffleUpsertArgs>(
      args: SelectSubset<T, RaffleUpsertArgs>
    ): CheckSelect<T, Prisma__RaffleClient<Raffle>, Prisma__RaffleClient<RaffleGetPayload<T>>>

    /**
     * Count the number of Raffles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleCountArgs} args - Arguments to filter Raffles to count.
     * @example
     * // Count the number of Raffles
     * const count = await prisma.raffle.count({
     *   where: {
     *     // ... the filter for the Raffles we want to count
     *   }
     * })
    **/
    count<T extends RaffleCountArgs>(
      args?: Subset<T, RaffleCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RaffleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Raffle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RaffleAggregateArgs>(args: Subset<T, RaffleAggregateArgs>): PrismaPromise<GetRaffleAggregateType<T>>

    /**
     * Group by Raffle.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RaffleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RaffleGroupByArgs['orderBy'] }
        : { orderBy?: RaffleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RaffleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaffleGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Raffle.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RaffleClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    participants<T extends ParticipantFindManyArgs = {}>(args?: Subset<T, ParticipantFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Participant>>, PrismaPromise<Array<ParticipantGetPayload<T>>>>;

    raffleSkins<T extends RaffleSkinFindManyArgs = {}>(args?: Subset<T, RaffleSkinFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RaffleSkin>>, PrismaPromise<Array<RaffleSkinGetPayload<T>>>>;

    transactions<T extends TransactionFindManyArgs = {}>(args?: Subset<T, TransactionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Raffle findUnique
   */
  export type RaffleFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * Throw an Error if a Raffle can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Raffle to fetch.
     * 
    **/
    where: RaffleWhereUniqueInput
  }


  /**
   * Raffle findFirst
   */
  export type RaffleFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * Throw an Error if a Raffle can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Raffle to fetch.
     * 
    **/
    where?: RaffleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Raffles to fetch.
     * 
    **/
    orderBy?: Enumerable<RaffleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Raffles.
     * 
    **/
    cursor?: RaffleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Raffles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Raffles.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Raffles.
     * 
    **/
    distinct?: Enumerable<RaffleScalarFieldEnum>
  }


  /**
   * Raffle findMany
   */
  export type RaffleFindManyArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * Filter, which Raffles to fetch.
     * 
    **/
    where?: RaffleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Raffles to fetch.
     * 
    **/
    orderBy?: Enumerable<RaffleOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Raffles.
     * 
    **/
    cursor?: RaffleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Raffles from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Raffles.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RaffleScalarFieldEnum>
  }


  /**
   * Raffle create
   */
  export type RaffleCreateArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * The data needed to create a Raffle.
     * 
    **/
    data: XOR<RaffleCreateInput, RaffleUncheckedCreateInput>
  }


  /**
   * Raffle createMany
   */
  export type RaffleCreateManyArgs = {
    /**
     * The data used to create many Raffles.
     * 
    **/
    data: Enumerable<RaffleCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Raffle update
   */
  export type RaffleUpdateArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * The data needed to update a Raffle.
     * 
    **/
    data: XOR<RaffleUpdateInput, RaffleUncheckedUpdateInput>
    /**
     * Choose, which Raffle to update.
     * 
    **/
    where: RaffleWhereUniqueInput
  }


  /**
   * Raffle updateMany
   */
  export type RaffleUpdateManyArgs = {
    /**
     * The data used to update Raffles.
     * 
    **/
    data: XOR<RaffleUpdateManyMutationInput, RaffleUncheckedUpdateManyInput>
    /**
     * Filter which Raffles to update
     * 
    **/
    where?: RaffleWhereInput
  }


  /**
   * Raffle upsert
   */
  export type RaffleUpsertArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * The filter to search for the Raffle to update in case it exists.
     * 
    **/
    where: RaffleWhereUniqueInput
    /**
     * In case the Raffle found by the `where` argument doesn't exist, create a new Raffle with this data.
     * 
    **/
    create: XOR<RaffleCreateInput, RaffleUncheckedCreateInput>
    /**
     * In case the Raffle was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RaffleUpdateInput, RaffleUncheckedUpdateInput>
  }


  /**
   * Raffle delete
   */
  export type RaffleDeleteArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
    /**
     * Filter which Raffle to delete.
     * 
    **/
    where: RaffleWhereUniqueInput
  }


  /**
   * Raffle deleteMany
   */
  export type RaffleDeleteManyArgs = {
    /**
     * Filter which Raffles to delete
     * 
    **/
    where?: RaffleWhereInput
  }


  /**
   * Raffle without action
   */
  export type RaffleArgs = {
    /**
     * Select specific fields to fetch from the Raffle
     * 
    **/
    select?: RaffleSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleInclude | null
  }



  /**
   * Model RaffleSkin
   */


  export type AggregateRaffleSkin = {
    _count: RaffleSkinCountAggregateOutputType | null
    _avg: RaffleSkinAvgAggregateOutputType | null
    _sum: RaffleSkinSumAggregateOutputType | null
    _min: RaffleSkinMinAggregateOutputType | null
    _max: RaffleSkinMaxAggregateOutputType | null
  }

  export type RaffleSkinAvgAggregateOutputType = {
    id: number | null
    raffle_id: number | null
    skin_id: number | null
    winner_id: number | null
    skinValue: number | null
  }

  export type RaffleSkinSumAggregateOutputType = {
    id: number | null
    raffle_id: number | null
    skin_id: number | null
    winner_id: number | null
    skinValue: number | null
  }

  export type RaffleSkinMinAggregateOutputType = {
    id: number | null
    raffle_id: number | null
    skin_id: number | null
    winner_id: number | null
    skinName: string | null
    skinValue: number | null
    skinType: string | null
    skinPicture: string | null
  }

  export type RaffleSkinMaxAggregateOutputType = {
    id: number | null
    raffle_id: number | null
    skin_id: number | null
    winner_id: number | null
    skinName: string | null
    skinValue: number | null
    skinType: string | null
    skinPicture: string | null
  }

  export type RaffleSkinCountAggregateOutputType = {
    id: number
    raffle_id: number
    skin_id: number
    winner_id: number
    skinName: number
    skinValue: number
    skinType: number
    skinPicture: number
    _all: number
  }


  export type RaffleSkinAvgAggregateInputType = {
    id?: true
    raffle_id?: true
    skin_id?: true
    winner_id?: true
    skinValue?: true
  }

  export type RaffleSkinSumAggregateInputType = {
    id?: true
    raffle_id?: true
    skin_id?: true
    winner_id?: true
    skinValue?: true
  }

  export type RaffleSkinMinAggregateInputType = {
    id?: true
    raffle_id?: true
    skin_id?: true
    winner_id?: true
    skinName?: true
    skinValue?: true
    skinType?: true
    skinPicture?: true
  }

  export type RaffleSkinMaxAggregateInputType = {
    id?: true
    raffle_id?: true
    skin_id?: true
    winner_id?: true
    skinName?: true
    skinValue?: true
    skinType?: true
    skinPicture?: true
  }

  export type RaffleSkinCountAggregateInputType = {
    id?: true
    raffle_id?: true
    skin_id?: true
    winner_id?: true
    skinName?: true
    skinValue?: true
    skinType?: true
    skinPicture?: true
    _all?: true
  }

  export type RaffleSkinAggregateArgs = {
    /**
     * Filter which RaffleSkin to aggregate.
     * 
    **/
    where?: RaffleSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaffleSkins to fetch.
     * 
    **/
    orderBy?: Enumerable<RaffleSkinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RaffleSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaffleSkins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaffleSkins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RaffleSkins
    **/
    _count?: true | RaffleSkinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RaffleSkinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RaffleSkinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RaffleSkinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RaffleSkinMaxAggregateInputType
  }

  export type GetRaffleSkinAggregateType<T extends RaffleSkinAggregateArgs> = {
        [P in keyof T & keyof AggregateRaffleSkin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRaffleSkin[P]>
      : GetScalarType<T[P], AggregateRaffleSkin[P]>
  }




  export type RaffleSkinGroupByArgs = {
    where?: RaffleSkinWhereInput
    orderBy?: Enumerable<RaffleSkinOrderByWithAggregationInput>
    by: Array<RaffleSkinScalarFieldEnum>
    having?: RaffleSkinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RaffleSkinCountAggregateInputType | true
    _avg?: RaffleSkinAvgAggregateInputType
    _sum?: RaffleSkinSumAggregateInputType
    _min?: RaffleSkinMinAggregateInputType
    _max?: RaffleSkinMaxAggregateInputType
  }


  export type RaffleSkinGroupByOutputType = {
    id: number
    raffle_id: number
    skin_id: number
    winner_id: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
    _count: RaffleSkinCountAggregateOutputType | null
    _avg: RaffleSkinAvgAggregateOutputType | null
    _sum: RaffleSkinSumAggregateOutputType | null
    _min: RaffleSkinMinAggregateOutputType | null
    _max: RaffleSkinMaxAggregateOutputType | null
  }

  type GetRaffleSkinGroupByPayload<T extends RaffleSkinGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RaffleSkinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RaffleSkinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RaffleSkinGroupByOutputType[P]>
            : GetScalarType<T[P], RaffleSkinGroupByOutputType[P]>
        }
      >
    >


  export type RaffleSkinSelect = {
    id?: boolean
    raffle_id?: boolean
    raffle?: boolean | RaffleArgs
    skin_id?: boolean
    skin?: boolean | SkinArgs
    winner?: boolean | ParticipantArgs
    winner_id?: boolean
    skinName?: boolean
    skinValue?: boolean
    skinType?: boolean
    skinPicture?: boolean
  }

  export type RaffleSkinInclude = {
    raffle?: boolean | RaffleArgs
    skin?: boolean | SkinArgs
    winner?: boolean | ParticipantArgs
  }

  export type RaffleSkinGetPayload<
    S extends boolean | null | undefined | RaffleSkinArgs,
    U = keyof S
      > = S extends true
        ? RaffleSkin
    : S extends undefined
    ? never
    : S extends RaffleSkinArgs | RaffleSkinFindManyArgs
    ?'include' extends U
    ? RaffleSkin  & {
    [P in TrueKeys<S['include']>]:
        P extends 'raffle' ? RaffleGetPayload<S['include'][P]> :
        P extends 'skin' ? SkinGetPayload<S['include'][P]> :
        P extends 'winner' ? ParticipantGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'raffle' ? RaffleGetPayload<S['select'][P]> :
        P extends 'skin' ? SkinGetPayload<S['select'][P]> :
        P extends 'winner' ? ParticipantGetPayload<S['select'][P]> | null :  P extends keyof RaffleSkin ? RaffleSkin[P] : never
  } 
    : RaffleSkin
  : RaffleSkin


  type RaffleSkinCountArgs = Merge<
    Omit<RaffleSkinFindManyArgs, 'select' | 'include'> & {
      select?: RaffleSkinCountAggregateInputType | true
    }
  >

  export interface RaffleSkinDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one RaffleSkin that matches the filter.
     * @param {RaffleSkinFindUniqueArgs} args - Arguments to find a RaffleSkin
     * @example
     * // Get one RaffleSkin
     * const raffleSkin = await prisma.raffleSkin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RaffleSkinFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RaffleSkinFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'RaffleSkin'> extends True ? CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin>, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T>>> : CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin | null >, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T> | null >>

    /**
     * Find the first RaffleSkin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleSkinFindFirstArgs} args - Arguments to find a RaffleSkin
     * @example
     * // Get one RaffleSkin
     * const raffleSkin = await prisma.raffleSkin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RaffleSkinFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RaffleSkinFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'RaffleSkin'> extends True ? CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin>, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T>>> : CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin | null >, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T> | null >>

    /**
     * Find zero or more RaffleSkins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleSkinFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RaffleSkins
     * const raffleSkins = await prisma.raffleSkin.findMany()
     * 
     * // Get first 10 RaffleSkins
     * const raffleSkins = await prisma.raffleSkin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const raffleSkinWithIdOnly = await prisma.raffleSkin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RaffleSkinFindManyArgs>(
      args?: SelectSubset<T, RaffleSkinFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<RaffleSkin>>, PrismaPromise<Array<RaffleSkinGetPayload<T>>>>

    /**
     * Create a RaffleSkin.
     * @param {RaffleSkinCreateArgs} args - Arguments to create a RaffleSkin.
     * @example
     * // Create one RaffleSkin
     * const RaffleSkin = await prisma.raffleSkin.create({
     *   data: {
     *     // ... data to create a RaffleSkin
     *   }
     * })
     * 
    **/
    create<T extends RaffleSkinCreateArgs>(
      args: SelectSubset<T, RaffleSkinCreateArgs>
    ): CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin>, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T>>>

    /**
     * Create many RaffleSkins.
     *     @param {RaffleSkinCreateManyArgs} args - Arguments to create many RaffleSkins.
     *     @example
     *     // Create many RaffleSkins
     *     const raffleSkin = await prisma.raffleSkin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RaffleSkinCreateManyArgs>(
      args?: SelectSubset<T, RaffleSkinCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a RaffleSkin.
     * @param {RaffleSkinDeleteArgs} args - Arguments to delete one RaffleSkin.
     * @example
     * // Delete one RaffleSkin
     * const RaffleSkin = await prisma.raffleSkin.delete({
     *   where: {
     *     // ... filter to delete one RaffleSkin
     *   }
     * })
     * 
    **/
    delete<T extends RaffleSkinDeleteArgs>(
      args: SelectSubset<T, RaffleSkinDeleteArgs>
    ): CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin>, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T>>>

    /**
     * Update one RaffleSkin.
     * @param {RaffleSkinUpdateArgs} args - Arguments to update one RaffleSkin.
     * @example
     * // Update one RaffleSkin
     * const raffleSkin = await prisma.raffleSkin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RaffleSkinUpdateArgs>(
      args: SelectSubset<T, RaffleSkinUpdateArgs>
    ): CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin>, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T>>>

    /**
     * Delete zero or more RaffleSkins.
     * @param {RaffleSkinDeleteManyArgs} args - Arguments to filter RaffleSkins to delete.
     * @example
     * // Delete a few RaffleSkins
     * const { count } = await prisma.raffleSkin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RaffleSkinDeleteManyArgs>(
      args?: SelectSubset<T, RaffleSkinDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more RaffleSkins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleSkinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RaffleSkins
     * const raffleSkin = await prisma.raffleSkin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RaffleSkinUpdateManyArgs>(
      args: SelectSubset<T, RaffleSkinUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one RaffleSkin.
     * @param {RaffleSkinUpsertArgs} args - Arguments to update or create a RaffleSkin.
     * @example
     * // Update or create a RaffleSkin
     * const raffleSkin = await prisma.raffleSkin.upsert({
     *   create: {
     *     // ... data to create a RaffleSkin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RaffleSkin we want to update
     *   }
     * })
    **/
    upsert<T extends RaffleSkinUpsertArgs>(
      args: SelectSubset<T, RaffleSkinUpsertArgs>
    ): CheckSelect<T, Prisma__RaffleSkinClient<RaffleSkin>, Prisma__RaffleSkinClient<RaffleSkinGetPayload<T>>>

    /**
     * Count the number of RaffleSkins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleSkinCountArgs} args - Arguments to filter RaffleSkins to count.
     * @example
     * // Count the number of RaffleSkins
     * const count = await prisma.raffleSkin.count({
     *   where: {
     *     // ... the filter for the RaffleSkins we want to count
     *   }
     * })
    **/
    count<T extends RaffleSkinCountArgs>(
      args?: Subset<T, RaffleSkinCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RaffleSkinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RaffleSkin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleSkinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RaffleSkinAggregateArgs>(args: Subset<T, RaffleSkinAggregateArgs>): PrismaPromise<GetRaffleSkinAggregateType<T>>

    /**
     * Group by RaffleSkin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RaffleSkinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RaffleSkinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RaffleSkinGroupByArgs['orderBy'] }
        : { orderBy?: RaffleSkinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RaffleSkinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRaffleSkinGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for RaffleSkin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RaffleSkinClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    raffle<T extends RaffleArgs = {}>(args?: Subset<T, RaffleArgs>): CheckSelect<T, Prisma__RaffleClient<Raffle | null >, Prisma__RaffleClient<RaffleGetPayload<T> | null >>;

    skin<T extends SkinArgs = {}>(args?: Subset<T, SkinArgs>): CheckSelect<T, Prisma__SkinClient<Skin | null >, Prisma__SkinClient<SkinGetPayload<T> | null >>;

    winner<T extends ParticipantArgs = {}>(args?: Subset<T, ParticipantArgs>): CheckSelect<T, Prisma__ParticipantClient<Participant | null >, Prisma__ParticipantClient<ParticipantGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * RaffleSkin findUnique
   */
  export type RaffleSkinFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * Throw an Error if a RaffleSkin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RaffleSkin to fetch.
     * 
    **/
    where: RaffleSkinWhereUniqueInput
  }


  /**
   * RaffleSkin findFirst
   */
  export type RaffleSkinFindFirstArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * Throw an Error if a RaffleSkin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which RaffleSkin to fetch.
     * 
    **/
    where?: RaffleSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaffleSkins to fetch.
     * 
    **/
    orderBy?: Enumerable<RaffleSkinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RaffleSkins.
     * 
    **/
    cursor?: RaffleSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaffleSkins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaffleSkins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RaffleSkins.
     * 
    **/
    distinct?: Enumerable<RaffleSkinScalarFieldEnum>
  }


  /**
   * RaffleSkin findMany
   */
  export type RaffleSkinFindManyArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * Filter, which RaffleSkins to fetch.
     * 
    **/
    where?: RaffleSkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RaffleSkins to fetch.
     * 
    **/
    orderBy?: Enumerable<RaffleSkinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RaffleSkins.
     * 
    **/
    cursor?: RaffleSkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RaffleSkins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RaffleSkins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RaffleSkinScalarFieldEnum>
  }


  /**
   * RaffleSkin create
   */
  export type RaffleSkinCreateArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * The data needed to create a RaffleSkin.
     * 
    **/
    data: XOR<RaffleSkinCreateInput, RaffleSkinUncheckedCreateInput>
  }


  /**
   * RaffleSkin createMany
   */
  export type RaffleSkinCreateManyArgs = {
    /**
     * The data used to create many RaffleSkins.
     * 
    **/
    data: Enumerable<RaffleSkinCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * RaffleSkin update
   */
  export type RaffleSkinUpdateArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * The data needed to update a RaffleSkin.
     * 
    **/
    data: XOR<RaffleSkinUpdateInput, RaffleSkinUncheckedUpdateInput>
    /**
     * Choose, which RaffleSkin to update.
     * 
    **/
    where: RaffleSkinWhereUniqueInput
  }


  /**
   * RaffleSkin updateMany
   */
  export type RaffleSkinUpdateManyArgs = {
    /**
     * The data used to update RaffleSkins.
     * 
    **/
    data: XOR<RaffleSkinUpdateManyMutationInput, RaffleSkinUncheckedUpdateManyInput>
    /**
     * Filter which RaffleSkins to update
     * 
    **/
    where?: RaffleSkinWhereInput
  }


  /**
   * RaffleSkin upsert
   */
  export type RaffleSkinUpsertArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * The filter to search for the RaffleSkin to update in case it exists.
     * 
    **/
    where: RaffleSkinWhereUniqueInput
    /**
     * In case the RaffleSkin found by the `where` argument doesn't exist, create a new RaffleSkin with this data.
     * 
    **/
    create: XOR<RaffleSkinCreateInput, RaffleSkinUncheckedCreateInput>
    /**
     * In case the RaffleSkin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RaffleSkinUpdateInput, RaffleSkinUncheckedUpdateInput>
  }


  /**
   * RaffleSkin delete
   */
  export type RaffleSkinDeleteArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
    /**
     * Filter which RaffleSkin to delete.
     * 
    **/
    where: RaffleSkinWhereUniqueInput
  }


  /**
   * RaffleSkin deleteMany
   */
  export type RaffleSkinDeleteManyArgs = {
    /**
     * Filter which RaffleSkins to delete
     * 
    **/
    where?: RaffleSkinWhereInput
  }


  /**
   * RaffleSkin without action
   */
  export type RaffleSkinArgs = {
    /**
     * Select specific fields to fetch from the RaffleSkin
     * 
    **/
    select?: RaffleSkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RaffleSkinInclude | null
  }



  /**
   * Model Participant
   */


  export type AggregateParticipant = {
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  export type ParticipantAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    raffle_id: number | null
    number: number | null
  }

  export type ParticipantSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    raffle_id: number | null
    number: number | null
  }

  export type ParticipantMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    raffle_id: number | null
    number: number | null
  }

  export type ParticipantMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    raffle_id: number | null
    number: number | null
  }

  export type ParticipantCountAggregateOutputType = {
    id: number
    user_id: number
    raffle_id: number
    number: number
    _all: number
  }


  export type ParticipantAvgAggregateInputType = {
    id?: true
    user_id?: true
    raffle_id?: true
    number?: true
  }

  export type ParticipantSumAggregateInputType = {
    id?: true
    user_id?: true
    raffle_id?: true
    number?: true
  }

  export type ParticipantMinAggregateInputType = {
    id?: true
    user_id?: true
    raffle_id?: true
    number?: true
  }

  export type ParticipantMaxAggregateInputType = {
    id?: true
    user_id?: true
    raffle_id?: true
    number?: true
  }

  export type ParticipantCountAggregateInputType = {
    id?: true
    user_id?: true
    raffle_id?: true
    number?: true
    _all?: true
  }

  export type ParticipantAggregateArgs = {
    /**
     * Filter which Participant to aggregate.
     * 
    **/
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     * 
    **/
    orderBy?: Enumerable<ParticipantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Participants
    **/
    _count?: true | ParticipantCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipantAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipantSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipantMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipantMaxAggregateInputType
  }

  export type GetParticipantAggregateType<T extends ParticipantAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipant]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipant[P]>
      : GetScalarType<T[P], AggregateParticipant[P]>
  }




  export type ParticipantGroupByArgs = {
    where?: ParticipantWhereInput
    orderBy?: Enumerable<ParticipantOrderByWithAggregationInput>
    by: Array<ParticipantScalarFieldEnum>
    having?: ParticipantScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipantCountAggregateInputType | true
    _avg?: ParticipantAvgAggregateInputType
    _sum?: ParticipantSumAggregateInputType
    _min?: ParticipantMinAggregateInputType
    _max?: ParticipantMaxAggregateInputType
  }


  export type ParticipantGroupByOutputType = {
    id: number
    user_id: number
    raffle_id: number
    number: number
    _count: ParticipantCountAggregateOutputType | null
    _avg: ParticipantAvgAggregateOutputType | null
    _sum: ParticipantSumAggregateOutputType | null
    _min: ParticipantMinAggregateOutputType | null
    _max: ParticipantMaxAggregateOutputType | null
  }

  type GetParticipantGroupByPayload<T extends ParticipantGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ParticipantGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipantGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipantGroupByOutputType[P]>
        }
      >
    >


  export type ParticipantSelect = {
    id?: boolean
    user_id?: boolean
    raffle_id?: boolean
    number?: boolean
    user?: boolean | UserArgs
    raffle?: boolean | RaffleArgs
    raffleSkins?: boolean | RaffleSkinFindManyArgs
    _count?: boolean | ParticipantCountOutputTypeArgs
  }

  export type ParticipantInclude = {
    user?: boolean | UserArgs
    raffle?: boolean | RaffleArgs
    raffleSkins?: boolean | RaffleSkinFindManyArgs
    _count?: boolean | ParticipantCountOutputTypeArgs
  }

  export type ParticipantGetPayload<
    S extends boolean | null | undefined | ParticipantArgs,
    U = keyof S
      > = S extends true
        ? Participant
    : S extends undefined
    ? never
    : S extends ParticipantArgs | ParticipantFindManyArgs
    ?'include' extends U
    ? Participant  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'raffle' ? RaffleGetPayload<S['include'][P]> :
        P extends 'raffleSkins' ? Array < RaffleSkinGetPayload<S['include'][P]>>  :
        P extends '_count' ? ParticipantCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'raffle' ? RaffleGetPayload<S['select'][P]> :
        P extends 'raffleSkins' ? Array < RaffleSkinGetPayload<S['select'][P]>>  :
        P extends '_count' ? ParticipantCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Participant ? Participant[P] : never
  } 
    : Participant
  : Participant


  type ParticipantCountArgs = Merge<
    Omit<ParticipantFindManyArgs, 'select' | 'include'> & {
      select?: ParticipantCountAggregateInputType | true
    }
  >

  export interface ParticipantDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Participant that matches the filter.
     * @param {ParticipantFindUniqueArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ParticipantFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ParticipantFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Participant'> extends True ? CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>> : CheckSelect<T, Prisma__ParticipantClient<Participant | null >, Prisma__ParticipantClient<ParticipantGetPayload<T> | null >>

    /**
     * Find the first Participant that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindFirstArgs} args - Arguments to find a Participant
     * @example
     * // Get one Participant
     * const participant = await prisma.participant.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ParticipantFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ParticipantFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Participant'> extends True ? CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>> : CheckSelect<T, Prisma__ParticipantClient<Participant | null >, Prisma__ParticipantClient<ParticipantGetPayload<T> | null >>

    /**
     * Find zero or more Participants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participants
     * const participants = await prisma.participant.findMany()
     * 
     * // Get first 10 Participants
     * const participants = await prisma.participant.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const participantWithIdOnly = await prisma.participant.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ParticipantFindManyArgs>(
      args?: SelectSubset<T, ParticipantFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Participant>>, PrismaPromise<Array<ParticipantGetPayload<T>>>>

    /**
     * Create a Participant.
     * @param {ParticipantCreateArgs} args - Arguments to create a Participant.
     * @example
     * // Create one Participant
     * const Participant = await prisma.participant.create({
     *   data: {
     *     // ... data to create a Participant
     *   }
     * })
     * 
    **/
    create<T extends ParticipantCreateArgs>(
      args: SelectSubset<T, ParticipantCreateArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Create many Participants.
     *     @param {ParticipantCreateManyArgs} args - Arguments to create many Participants.
     *     @example
     *     // Create many Participants
     *     const participant = await prisma.participant.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ParticipantCreateManyArgs>(
      args?: SelectSubset<T, ParticipantCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Participant.
     * @param {ParticipantDeleteArgs} args - Arguments to delete one Participant.
     * @example
     * // Delete one Participant
     * const Participant = await prisma.participant.delete({
     *   where: {
     *     // ... filter to delete one Participant
     *   }
     * })
     * 
    **/
    delete<T extends ParticipantDeleteArgs>(
      args: SelectSubset<T, ParticipantDeleteArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Update one Participant.
     * @param {ParticipantUpdateArgs} args - Arguments to update one Participant.
     * @example
     * // Update one Participant
     * const participant = await prisma.participant.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ParticipantUpdateArgs>(
      args: SelectSubset<T, ParticipantUpdateArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Delete zero or more Participants.
     * @param {ParticipantDeleteManyArgs} args - Arguments to filter Participants to delete.
     * @example
     * // Delete a few Participants
     * const { count } = await prisma.participant.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ParticipantDeleteManyArgs>(
      args?: SelectSubset<T, ParticipantDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participants
     * const participant = await prisma.participant.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ParticipantUpdateManyArgs>(
      args: SelectSubset<T, ParticipantUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Participant.
     * @param {ParticipantUpsertArgs} args - Arguments to update or create a Participant.
     * @example
     * // Update or create a Participant
     * const participant = await prisma.participant.upsert({
     *   create: {
     *     // ... data to create a Participant
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participant we want to update
     *   }
     * })
    **/
    upsert<T extends ParticipantUpsertArgs>(
      args: SelectSubset<T, ParticipantUpsertArgs>
    ): CheckSelect<T, Prisma__ParticipantClient<Participant>, Prisma__ParticipantClient<ParticipantGetPayload<T>>>

    /**
     * Count the number of Participants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantCountArgs} args - Arguments to filter Participants to count.
     * @example
     * // Count the number of Participants
     * const count = await prisma.participant.count({
     *   where: {
     *     // ... the filter for the Participants we want to count
     *   }
     * })
    **/
    count<T extends ParticipantCountArgs>(
      args?: Subset<T, ParticipantCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipantCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipantAggregateArgs>(args: Subset<T, ParticipantAggregateArgs>): PrismaPromise<GetParticipantAggregateType<T>>

    /**
     * Group by Participant.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipantGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParticipantGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParticipantGroupByArgs['orderBy'] }
        : { orderBy?: ParticipantGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParticipantGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipantGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Participant.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ParticipantClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    raffle<T extends RaffleArgs = {}>(args?: Subset<T, RaffleArgs>): CheckSelect<T, Prisma__RaffleClient<Raffle | null >, Prisma__RaffleClient<RaffleGetPayload<T> | null >>;

    raffleSkins<T extends RaffleSkinFindManyArgs = {}>(args?: Subset<T, RaffleSkinFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RaffleSkin>>, PrismaPromise<Array<RaffleSkinGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Participant findUnique
   */
  export type ParticipantFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Throw an Error if a Participant can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Participant to fetch.
     * 
    **/
    where: ParticipantWhereUniqueInput
  }


  /**
   * Participant findFirst
   */
  export type ParticipantFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Throw an Error if a Participant can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Participant to fetch.
     * 
    **/
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     * 
    **/
    orderBy?: Enumerable<ParticipantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Participants.
     * 
    **/
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Participants.
     * 
    **/
    distinct?: Enumerable<ParticipantScalarFieldEnum>
  }


  /**
   * Participant findMany
   */
  export type ParticipantFindManyArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Filter, which Participants to fetch.
     * 
    **/
    where?: ParticipantWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Participants to fetch.
     * 
    **/
    orderBy?: Enumerable<ParticipantOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Participants.
     * 
    **/
    cursor?: ParticipantWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Participants from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Participants.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ParticipantScalarFieldEnum>
  }


  /**
   * Participant create
   */
  export type ParticipantCreateArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * The data needed to create a Participant.
     * 
    **/
    data: XOR<ParticipantCreateInput, ParticipantUncheckedCreateInput>
  }


  /**
   * Participant createMany
   */
  export type ParticipantCreateManyArgs = {
    /**
     * The data used to create many Participants.
     * 
    **/
    data: Enumerable<ParticipantCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Participant update
   */
  export type ParticipantUpdateArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * The data needed to update a Participant.
     * 
    **/
    data: XOR<ParticipantUpdateInput, ParticipantUncheckedUpdateInput>
    /**
     * Choose, which Participant to update.
     * 
    **/
    where: ParticipantWhereUniqueInput
  }


  /**
   * Participant updateMany
   */
  export type ParticipantUpdateManyArgs = {
    /**
     * The data used to update Participants.
     * 
    **/
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyInput>
    /**
     * Filter which Participants to update
     * 
    **/
    where?: ParticipantWhereInput
  }


  /**
   * Participant upsert
   */
  export type ParticipantUpsertArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * The filter to search for the Participant to update in case it exists.
     * 
    **/
    where: ParticipantWhereUniqueInput
    /**
     * In case the Participant found by the `where` argument doesn't exist, create a new Participant with this data.
     * 
    **/
    create: XOR<ParticipantCreateInput, ParticipantUncheckedCreateInput>
    /**
     * In case the Participant was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ParticipantUpdateInput, ParticipantUncheckedUpdateInput>
  }


  /**
   * Participant delete
   */
  export type ParticipantDeleteArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
    /**
     * Filter which Participant to delete.
     * 
    **/
    where: ParticipantWhereUniqueInput
  }


  /**
   * Participant deleteMany
   */
  export type ParticipantDeleteManyArgs = {
    /**
     * Filter which Participants to delete
     * 
    **/
    where?: ParticipantWhereInput
  }


  /**
   * Participant without action
   */
  export type ParticipantArgs = {
    /**
     * Select specific fields to fetch from the Participant
     * 
    **/
    select?: ParticipantSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ParticipantInclude | null
  }



  /**
   * Model Skin
   */


  export type AggregateSkin = {
    _count: SkinCountAggregateOutputType | null
    _avg: SkinAvgAggregateOutputType | null
    _sum: SkinSumAggregateOutputType | null
    _min: SkinMinAggregateOutputType | null
    _max: SkinMaxAggregateOutputType | null
  }

  export type SkinAvgAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type SkinSumAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type SkinMinAggregateOutputType = {
    id: number | null
    name: string | null
    value: number | null
    type: string | null
    picture: string | null
  }

  export type SkinMaxAggregateOutputType = {
    id: number | null
    name: string | null
    value: number | null
    type: string | null
    picture: string | null
  }

  export type SkinCountAggregateOutputType = {
    id: number
    name: number
    value: number
    type: number
    picture: number
    _all: number
  }


  export type SkinAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type SkinSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type SkinMinAggregateInputType = {
    id?: true
    name?: true
    value?: true
    type?: true
    picture?: true
  }

  export type SkinMaxAggregateInputType = {
    id?: true
    name?: true
    value?: true
    type?: true
    picture?: true
  }

  export type SkinCountAggregateInputType = {
    id?: true
    name?: true
    value?: true
    type?: true
    picture?: true
    _all?: true
  }

  export type SkinAggregateArgs = {
    /**
     * Filter which Skin to aggregate.
     * 
    **/
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     * 
    **/
    orderBy?: Enumerable<SkinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Skins
    **/
    _count?: true | SkinCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SkinAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SkinSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SkinMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SkinMaxAggregateInputType
  }

  export type GetSkinAggregateType<T extends SkinAggregateArgs> = {
        [P in keyof T & keyof AggregateSkin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSkin[P]>
      : GetScalarType<T[P], AggregateSkin[P]>
  }




  export type SkinGroupByArgs = {
    where?: SkinWhereInput
    orderBy?: Enumerable<SkinOrderByWithAggregationInput>
    by: Array<SkinScalarFieldEnum>
    having?: SkinScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SkinCountAggregateInputType | true
    _avg?: SkinAvgAggregateInputType
    _sum?: SkinSumAggregateInputType
    _min?: SkinMinAggregateInputType
    _max?: SkinMaxAggregateInputType
  }


  export type SkinGroupByOutputType = {
    id: number
    name: string
    value: number
    type: string
    picture: string
    _count: SkinCountAggregateOutputType | null
    _avg: SkinAvgAggregateOutputType | null
    _sum: SkinSumAggregateOutputType | null
    _min: SkinMinAggregateOutputType | null
    _max: SkinMaxAggregateOutputType | null
  }

  type GetSkinGroupByPayload<T extends SkinGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SkinGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SkinGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SkinGroupByOutputType[P]>
            : GetScalarType<T[P], SkinGroupByOutputType[P]>
        }
      >
    >


  export type SkinSelect = {
    id?: boolean
    name?: boolean
    value?: boolean
    type?: boolean
    picture?: boolean
    raffleSkins?: boolean | RaffleSkinFindManyArgs
    _count?: boolean | SkinCountOutputTypeArgs
  }

  export type SkinInclude = {
    raffleSkins?: boolean | RaffleSkinFindManyArgs
    _count?: boolean | SkinCountOutputTypeArgs
  }

  export type SkinGetPayload<
    S extends boolean | null | undefined | SkinArgs,
    U = keyof S
      > = S extends true
        ? Skin
    : S extends undefined
    ? never
    : S extends SkinArgs | SkinFindManyArgs
    ?'include' extends U
    ? Skin  & {
    [P in TrueKeys<S['include']>]:
        P extends 'raffleSkins' ? Array < RaffleSkinGetPayload<S['include'][P]>>  :
        P extends '_count' ? SkinCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'raffleSkins' ? Array < RaffleSkinGetPayload<S['select'][P]>>  :
        P extends '_count' ? SkinCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Skin ? Skin[P] : never
  } 
    : Skin
  : Skin


  type SkinCountArgs = Merge<
    Omit<SkinFindManyArgs, 'select' | 'include'> & {
      select?: SkinCountAggregateInputType | true
    }
  >

  export interface SkinDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Skin that matches the filter.
     * @param {SkinFindUniqueArgs} args - Arguments to find a Skin
     * @example
     * // Get one Skin
     * const skin = await prisma.skin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SkinFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SkinFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Skin'> extends True ? CheckSelect<T, Prisma__SkinClient<Skin>, Prisma__SkinClient<SkinGetPayload<T>>> : CheckSelect<T, Prisma__SkinClient<Skin | null >, Prisma__SkinClient<SkinGetPayload<T> | null >>

    /**
     * Find the first Skin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinFindFirstArgs} args - Arguments to find a Skin
     * @example
     * // Get one Skin
     * const skin = await prisma.skin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SkinFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SkinFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Skin'> extends True ? CheckSelect<T, Prisma__SkinClient<Skin>, Prisma__SkinClient<SkinGetPayload<T>>> : CheckSelect<T, Prisma__SkinClient<Skin | null >, Prisma__SkinClient<SkinGetPayload<T> | null >>

    /**
     * Find zero or more Skins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Skins
     * const skins = await prisma.skin.findMany()
     * 
     * // Get first 10 Skins
     * const skins = await prisma.skin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const skinWithIdOnly = await prisma.skin.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SkinFindManyArgs>(
      args?: SelectSubset<T, SkinFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Skin>>, PrismaPromise<Array<SkinGetPayload<T>>>>

    /**
     * Create a Skin.
     * @param {SkinCreateArgs} args - Arguments to create a Skin.
     * @example
     * // Create one Skin
     * const Skin = await prisma.skin.create({
     *   data: {
     *     // ... data to create a Skin
     *   }
     * })
     * 
    **/
    create<T extends SkinCreateArgs>(
      args: SelectSubset<T, SkinCreateArgs>
    ): CheckSelect<T, Prisma__SkinClient<Skin>, Prisma__SkinClient<SkinGetPayload<T>>>

    /**
     * Create many Skins.
     *     @param {SkinCreateManyArgs} args - Arguments to create many Skins.
     *     @example
     *     // Create many Skins
     *     const skin = await prisma.skin.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SkinCreateManyArgs>(
      args?: SelectSubset<T, SkinCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Skin.
     * @param {SkinDeleteArgs} args - Arguments to delete one Skin.
     * @example
     * // Delete one Skin
     * const Skin = await prisma.skin.delete({
     *   where: {
     *     // ... filter to delete one Skin
     *   }
     * })
     * 
    **/
    delete<T extends SkinDeleteArgs>(
      args: SelectSubset<T, SkinDeleteArgs>
    ): CheckSelect<T, Prisma__SkinClient<Skin>, Prisma__SkinClient<SkinGetPayload<T>>>

    /**
     * Update one Skin.
     * @param {SkinUpdateArgs} args - Arguments to update one Skin.
     * @example
     * // Update one Skin
     * const skin = await prisma.skin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SkinUpdateArgs>(
      args: SelectSubset<T, SkinUpdateArgs>
    ): CheckSelect<T, Prisma__SkinClient<Skin>, Prisma__SkinClient<SkinGetPayload<T>>>

    /**
     * Delete zero or more Skins.
     * @param {SkinDeleteManyArgs} args - Arguments to filter Skins to delete.
     * @example
     * // Delete a few Skins
     * const { count } = await prisma.skin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SkinDeleteManyArgs>(
      args?: SelectSubset<T, SkinDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Skins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Skins
     * const skin = await prisma.skin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SkinUpdateManyArgs>(
      args: SelectSubset<T, SkinUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Skin.
     * @param {SkinUpsertArgs} args - Arguments to update or create a Skin.
     * @example
     * // Update or create a Skin
     * const skin = await prisma.skin.upsert({
     *   create: {
     *     // ... data to create a Skin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Skin we want to update
     *   }
     * })
    **/
    upsert<T extends SkinUpsertArgs>(
      args: SelectSubset<T, SkinUpsertArgs>
    ): CheckSelect<T, Prisma__SkinClient<Skin>, Prisma__SkinClient<SkinGetPayload<T>>>

    /**
     * Count the number of Skins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinCountArgs} args - Arguments to filter Skins to count.
     * @example
     * // Count the number of Skins
     * const count = await prisma.skin.count({
     *   where: {
     *     // ... the filter for the Skins we want to count
     *   }
     * })
    **/
    count<T extends SkinCountArgs>(
      args?: Subset<T, SkinCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SkinCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Skin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SkinAggregateArgs>(args: Subset<T, SkinAggregateArgs>): PrismaPromise<GetSkinAggregateType<T>>

    /**
     * Group by Skin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SkinGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SkinGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SkinGroupByArgs['orderBy'] }
        : { orderBy?: SkinGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SkinGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSkinGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Skin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SkinClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    raffleSkins<T extends RaffleSkinFindManyArgs = {}>(args?: Subset<T, RaffleSkinFindManyArgs>): CheckSelect<T, PrismaPromise<Array<RaffleSkin>>, PrismaPromise<Array<RaffleSkinGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Skin findUnique
   */
  export type SkinFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * Throw an Error if a Skin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skin to fetch.
     * 
    **/
    where: SkinWhereUniqueInput
  }


  /**
   * Skin findFirst
   */
  export type SkinFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * Throw an Error if a Skin can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Skin to fetch.
     * 
    **/
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     * 
    **/
    orderBy?: Enumerable<SkinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Skins.
     * 
    **/
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Skins.
     * 
    **/
    distinct?: Enumerable<SkinScalarFieldEnum>
  }


  /**
   * Skin findMany
   */
  export type SkinFindManyArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * Filter, which Skins to fetch.
     * 
    **/
    where?: SkinWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Skins to fetch.
     * 
    **/
    orderBy?: Enumerable<SkinOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Skins.
     * 
    **/
    cursor?: SkinWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Skins from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Skins.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SkinScalarFieldEnum>
  }


  /**
   * Skin create
   */
  export type SkinCreateArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * The data needed to create a Skin.
     * 
    **/
    data: XOR<SkinCreateInput, SkinUncheckedCreateInput>
  }


  /**
   * Skin createMany
   */
  export type SkinCreateManyArgs = {
    /**
     * The data used to create many Skins.
     * 
    **/
    data: Enumerable<SkinCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Skin update
   */
  export type SkinUpdateArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * The data needed to update a Skin.
     * 
    **/
    data: XOR<SkinUpdateInput, SkinUncheckedUpdateInput>
    /**
     * Choose, which Skin to update.
     * 
    **/
    where: SkinWhereUniqueInput
  }


  /**
   * Skin updateMany
   */
  export type SkinUpdateManyArgs = {
    /**
     * The data used to update Skins.
     * 
    **/
    data: XOR<SkinUpdateManyMutationInput, SkinUncheckedUpdateManyInput>
    /**
     * Filter which Skins to update
     * 
    **/
    where?: SkinWhereInput
  }


  /**
   * Skin upsert
   */
  export type SkinUpsertArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * The filter to search for the Skin to update in case it exists.
     * 
    **/
    where: SkinWhereUniqueInput
    /**
     * In case the Skin found by the `where` argument doesn't exist, create a new Skin with this data.
     * 
    **/
    create: XOR<SkinCreateInput, SkinUncheckedCreateInput>
    /**
     * In case the Skin was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SkinUpdateInput, SkinUncheckedUpdateInput>
  }


  /**
   * Skin delete
   */
  export type SkinDeleteArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
    /**
     * Filter which Skin to delete.
     * 
    **/
    where: SkinWhereUniqueInput
  }


  /**
   * Skin deleteMany
   */
  export type SkinDeleteManyArgs = {
    /**
     * Filter which Skins to delete
     * 
    **/
    where?: SkinWhereInput
  }


  /**
   * Skin without action
   */
  export type SkinArgs = {
    /**
     * Select specific fields to fetch from the Skin
     * 
    **/
    select?: SkinSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SkinInclude | null
  }



  /**
   * Model Session
   */


  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SessionSumAggregateOutputType = {
    id: number | null
    user_id: number | null
  }

  export type SessionMinAggregateOutputType = {
    id: number | null
    token: string | null
    user_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: number | null
    token: string | null
    user_id: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    token: number
    user_id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionAvgAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SessionSumAggregateInputType = {
    id?: true
    user_id?: true
  }

  export type SessionMinAggregateInputType = {
    id?: true
    token?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    token?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    token?: true
    user_id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionAggregateArgs = {
    /**
     * Filter which Session to aggregate.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs = {
    where?: SessionWhereInput
    orderBy?: Enumerable<SessionOrderByWithAggregationInput>
    by: Array<SessionScalarFieldEnum>
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _avg?: SessionAvgAggregateInputType
    _sum?: SessionSumAggregateInputType
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }


  export type SessionGroupByOutputType = {
    id: number
    token: string
    user_id: number
    createdAt: Date
    updatedAt: Date
    _count: SessionCountAggregateOutputType | null
    _avg: SessionAvgAggregateOutputType | null
    _sum: SessionSumAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect = {
    id?: boolean
    token?: boolean
    user_id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserArgs
  }

  export type SessionInclude = {
    user?: boolean | UserArgs
  }

  export type SessionGetPayload<
    S extends boolean | null | undefined | SessionArgs,
    U = keyof S
      > = S extends true
        ? Session
    : S extends undefined
    ? never
    : S extends SessionArgs | SessionFindManyArgs
    ?'include' extends U
    ? Session  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :  P extends keyof Session ? Session[P] : never
  } 
    : Session
  : Session


  type SessionCountArgs = Merge<
    Omit<SessionFindManyArgs, 'select' | 'include'> & {
      select?: SessionCountAggregateInputType | true
    }
  >

  export interface SessionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, SessionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, SessionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Session'> extends True ? CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>> : CheckSelect<T, Prisma__SessionClient<Session | null >, Prisma__SessionClient<SessionGetPayload<T> | null >>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs>(
      args?: SelectSubset<T, SessionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Session>>, PrismaPromise<Array<SessionGetPayload<T>>>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs>(
      args: SelectSubset<T, SessionCreateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs>(
      args?: SelectSubset<T, SessionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs>(
      args: SelectSubset<T, SessionDeleteArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs>(
      args: SelectSubset<T, SessionUpdateArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs>(
      args?: SelectSubset<T, SessionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs>(
      args: SelectSubset<T, SessionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs>(
      args: SelectSubset<T, SessionUpsertArgs>
    ): CheckSelect<T, Prisma__SessionClient<Session>, Prisma__SessionClient<SessionGetPayload<T>>>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__SessionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Throw an Error if a Session can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Session to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     * 
    **/
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session findMany
   */
  export type SessionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter, which Sessions to fetch.
     * 
    **/
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     * 
    **/
    orderBy?: Enumerable<SessionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     * 
    **/
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SessionScalarFieldEnum>
  }


  /**
   * Session create
   */
  export type SessionCreateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to create a Session.
     * 
    **/
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }


  /**
   * Session createMany
   */
  export type SessionCreateManyArgs = {
    /**
     * The data used to create many Sessions.
     * 
    **/
    data: Enumerable<SessionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Session update
   */
  export type SessionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The data needed to update a Session.
     * 
    **/
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs = {
    /**
     * The data used to update Sessions.
     * 
    **/
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session upsert
   */
  export type SessionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * The filter to search for the Session to update in case it exists.
     * 
    **/
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     * 
    **/
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }


  /**
   * Session delete
   */
  export type SessionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
    /**
     * Filter which Session to delete.
     * 
    **/
    where: SessionWhereUniqueInput
  }


  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs = {
    /**
     * Filter which Sessions to delete
     * 
    **/
    where?: SessionWhereInput
  }


  /**
   * Session without action
   */
  export type SessionArgs = {
    /**
     * Select specific fields to fetch from the Session
     * 
    **/
    select?: SessionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: SessionInclude | null
  }



  /**
   * Model Transaction
   */


  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    user_id: number | null
    transactionAmount: number | null
    raffle_id: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    user_id: number | null
    transactionAmount: number | null
    raffle_id: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    user_id: number | null
    paymentId: string | null
    status: string | null
    status_detail: string | null
    paymentMethod: string | null
    transactionAmount: number | null
    dateCreated: Date | null
    dateApproved: Date | null
    dateLastUpdated: Date | null
    type: string | null
    raffle_id: number | null
    qrCode: string | null
    qrCodeBase64: string | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    user_id: number | null
    paymentId: string | null
    status: string | null
    status_detail: string | null
    paymentMethod: string | null
    transactionAmount: number | null
    dateCreated: Date | null
    dateApproved: Date | null
    dateLastUpdated: Date | null
    type: string | null
    raffle_id: number | null
    qrCode: string | null
    qrCodeBase64: string | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    user_id: number
    paymentId: number
    status: number
    status_detail: number
    paymentMethod: number
    transactionAmount: number
    dateCreated: number
    dateApproved: number
    dateLastUpdated: number
    type: number
    raffle_id: number
    qrCode: number
    qrCodeBase64: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    user_id?: true
    transactionAmount?: true
    raffle_id?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    user_id?: true
    transactionAmount?: true
    raffle_id?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    user_id?: true
    paymentId?: true
    status?: true
    status_detail?: true
    paymentMethod?: true
    transactionAmount?: true
    dateCreated?: true
    dateApproved?: true
    dateLastUpdated?: true
    type?: true
    raffle_id?: true
    qrCode?: true
    qrCodeBase64?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    user_id?: true
    paymentId?: true
    status?: true
    status_detail?: true
    paymentMethod?: true
    transactionAmount?: true
    dateCreated?: true
    dateApproved?: true
    dateLastUpdated?: true
    type?: true
    raffle_id?: true
    qrCode?: true
    qrCodeBase64?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    user_id?: true
    paymentId?: true
    status?: true
    status_detail?: true
    paymentMethod?: true
    transactionAmount?: true
    dateCreated?: true
    dateApproved?: true
    dateLastUpdated?: true
    type?: true
    raffle_id?: true
    qrCode?: true
    qrCodeBase64?: true
    _all?: true
  }

  export type TransactionAggregateArgs = {
    /**
     * Filter which Transaction to aggregate.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs = {
    where?: TransactionWhereInput
    orderBy?: Enumerable<TransactionOrderByWithAggregationInput>
    by: Array<TransactionScalarFieldEnum>
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }


  export type TransactionGroupByOutputType = {
    id: number
    user_id: number
    paymentId: string | null
    status: string
    status_detail: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated: Date
    dateApproved: Date | null
    dateLastUpdated: Date
    type: string
    raffle_id: number | null
    qrCode: string | null
    qrCodeBase64: string | null
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect = {
    id?: boolean
    user?: boolean | UserArgs
    user_id?: boolean
    paymentId?: boolean
    status?: boolean
    status_detail?: boolean
    paymentMethod?: boolean
    transactionAmount?: boolean
    dateCreated?: boolean
    dateApproved?: boolean
    dateLastUpdated?: boolean
    type?: boolean
    raffle_id?: boolean
    raffle?: boolean | RaffleArgs
    qrCode?: boolean
    qrCodeBase64?: boolean
  }

  export type TransactionInclude = {
    user?: boolean | UserArgs
    raffle?: boolean | RaffleArgs
  }

  export type TransactionGetPayload<
    S extends boolean | null | undefined | TransactionArgs,
    U = keyof S
      > = S extends true
        ? Transaction
    : S extends undefined
    ? never
    : S extends TransactionArgs | TransactionFindManyArgs
    ?'include' extends U
    ? Transaction  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'raffle' ? RaffleGetPayload<S['include'][P]> | null :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'raffle' ? RaffleGetPayload<S['select'][P]> | null :  P extends keyof Transaction ? Transaction[P] : never
  } 
    : Transaction
  : Transaction


  type TransactionCountArgs = Merge<
    Omit<TransactionFindManyArgs, 'select' | 'include'> & {
      select?: TransactionCountAggregateInputType | true
    }
  >

  export interface TransactionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TransactionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TransactionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TransactionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TransactionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Transaction'> extends True ? CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>> : CheckSelect<T, Prisma__TransactionClient<Transaction | null >, Prisma__TransactionClient<TransactionGetPayload<T> | null >>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TransactionFindManyArgs>(
      args?: SelectSubset<T, TransactionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Transaction>>, PrismaPromise<Array<TransactionGetPayload<T>>>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
    **/
    create<T extends TransactionCreateArgs>(
      args: SelectSubset<T, TransactionCreateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Create many Transactions.
     *     @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     *     @example
     *     // Create many Transactions
     *     const transaction = await prisma.transaction.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TransactionCreateManyArgs>(
      args?: SelectSubset<T, TransactionCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
    **/
    delete<T extends TransactionDeleteArgs>(
      args: SelectSubset<T, TransactionDeleteArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TransactionUpdateArgs>(
      args: SelectSubset<T, TransactionUpdateArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TransactionDeleteManyArgs>(
      args?: SelectSubset<T, TransactionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TransactionUpdateManyArgs>(
      args: SelectSubset<T, TransactionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
    **/
    upsert<T extends TransactionUpsertArgs>(
      args: SelectSubset<T, TransactionUpsertArgs>
    ): CheckSelect<T, Prisma__TransactionClient<Transaction>, Prisma__TransactionClient<TransactionGetPayload<T>>>

    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TransactionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserArgs = {}>(args?: Subset<T, UserArgs>): CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>;

    raffle<T extends RaffleArgs = {}>(args?: Subset<T, RaffleArgs>): CheckSelect<T, Prisma__RaffleClient<Raffle | null >, Prisma__RaffleClient<RaffleGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Throw an Error if a Transaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Throw an Error if a Transaction can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Transaction to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     * 
    **/
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter, which Transactions to fetch.
     * 
    **/
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     * 
    **/
    orderBy?: Enumerable<TransactionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     * 
    **/
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TransactionScalarFieldEnum>
  }


  /**
   * Transaction create
   */
  export type TransactionCreateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to create a Transaction.
     * 
    **/
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }


  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs = {
    /**
     * The data used to create many Transactions.
     * 
    **/
    data: Enumerable<TransactionCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Transaction update
   */
  export type TransactionUpdateArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The data needed to update a Transaction.
     * 
    **/
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs = {
    /**
     * The data used to update Transactions.
     * 
    **/
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     * 
    **/
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     * 
    **/
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }


  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
    /**
     * Filter which Transaction to delete.
     * 
    **/
    where: TransactionWhereUniqueInput
  }


  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs = {
    /**
     * Filter which Transactions to delete
     * 
    **/
    where?: TransactionWhereInput
  }


  /**
   * Transaction without action
   */
  export type TransactionArgs = {
    /**
     * Select specific fields to fetch from the Transaction
     * 
    **/
    select?: TransactionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TransactionInclude | null
  }



  /**
   * Model Text
   */


  export type AggregateText = {
    _count: TextCountAggregateOutputType | null
    _avg: TextAvgAggregateOutputType | null
    _sum: TextSumAggregateOutputType | null
    _min: TextMinAggregateOutputType | null
    _max: TextMaxAggregateOutputType | null
  }

  export type TextAvgAggregateOutputType = {
    id: number | null
  }

  export type TextSumAggregateOutputType = {
    id: number | null
  }

  export type TextMinAggregateOutputType = {
    id: number | null
    text: string | null
  }

  export type TextMaxAggregateOutputType = {
    id: number | null
    text: string | null
  }

  export type TextCountAggregateOutputType = {
    id: number
    text: number
    _all: number
  }


  export type TextAvgAggregateInputType = {
    id?: true
  }

  export type TextSumAggregateInputType = {
    id?: true
  }

  export type TextMinAggregateInputType = {
    id?: true
    text?: true
  }

  export type TextMaxAggregateInputType = {
    id?: true
    text?: true
  }

  export type TextCountAggregateInputType = {
    id?: true
    text?: true
    _all?: true
  }

  export type TextAggregateArgs = {
    /**
     * Filter which Text to aggregate.
     * 
    **/
    where?: TextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Texts to fetch.
     * 
    **/
    orderBy?: Enumerable<TextOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Texts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Texts
    **/
    _count?: true | TextCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TextAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TextSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TextMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TextMaxAggregateInputType
  }

  export type GetTextAggregateType<T extends TextAggregateArgs> = {
        [P in keyof T & keyof AggregateText]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateText[P]>
      : GetScalarType<T[P], AggregateText[P]>
  }




  export type TextGroupByArgs = {
    where?: TextWhereInput
    orderBy?: Enumerable<TextOrderByWithAggregationInput>
    by: Array<TextScalarFieldEnum>
    having?: TextScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TextCountAggregateInputType | true
    _avg?: TextAvgAggregateInputType
    _sum?: TextSumAggregateInputType
    _min?: TextMinAggregateInputType
    _max?: TextMaxAggregateInputType
  }


  export type TextGroupByOutputType = {
    id: number
    text: string
    _count: TextCountAggregateOutputType | null
    _avg: TextAvgAggregateOutputType | null
    _sum: TextSumAggregateOutputType | null
    _min: TextMinAggregateOutputType | null
    _max: TextMaxAggregateOutputType | null
  }

  type GetTextGroupByPayload<T extends TextGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TextGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TextGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TextGroupByOutputType[P]>
            : GetScalarType<T[P], TextGroupByOutputType[P]>
        }
      >
    >


  export type TextSelect = {
    id?: boolean
    text?: boolean
  }

  export type TextGetPayload<
    S extends boolean | null | undefined | TextArgs,
    U = keyof S
      > = S extends true
        ? Text
    : S extends undefined
    ? never
    : S extends TextArgs | TextFindManyArgs
    ?'include' extends U
    ? Text 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Text ? Text[P] : never
  } 
    : Text
  : Text


  type TextCountArgs = Merge<
    Omit<TextFindManyArgs, 'select' | 'include'> & {
      select?: TextCountAggregateInputType | true
    }
  >

  export interface TextDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Text that matches the filter.
     * @param {TextFindUniqueArgs} args - Arguments to find a Text
     * @example
     * // Get one Text
     * const text = await prisma.text.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TextFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TextFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Text'> extends True ? CheckSelect<T, Prisma__TextClient<Text>, Prisma__TextClient<TextGetPayload<T>>> : CheckSelect<T, Prisma__TextClient<Text | null >, Prisma__TextClient<TextGetPayload<T> | null >>

    /**
     * Find the first Text that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextFindFirstArgs} args - Arguments to find a Text
     * @example
     * // Get one Text
     * const text = await prisma.text.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TextFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TextFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Text'> extends True ? CheckSelect<T, Prisma__TextClient<Text>, Prisma__TextClient<TextGetPayload<T>>> : CheckSelect<T, Prisma__TextClient<Text | null >, Prisma__TextClient<TextGetPayload<T> | null >>

    /**
     * Find zero or more Texts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Texts
     * const texts = await prisma.text.findMany()
     * 
     * // Get first 10 Texts
     * const texts = await prisma.text.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const textWithIdOnly = await prisma.text.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TextFindManyArgs>(
      args?: SelectSubset<T, TextFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Text>>, PrismaPromise<Array<TextGetPayload<T>>>>

    /**
     * Create a Text.
     * @param {TextCreateArgs} args - Arguments to create a Text.
     * @example
     * // Create one Text
     * const Text = await prisma.text.create({
     *   data: {
     *     // ... data to create a Text
     *   }
     * })
     * 
    **/
    create<T extends TextCreateArgs>(
      args: SelectSubset<T, TextCreateArgs>
    ): CheckSelect<T, Prisma__TextClient<Text>, Prisma__TextClient<TextGetPayload<T>>>

    /**
     * Create many Texts.
     *     @param {TextCreateManyArgs} args - Arguments to create many Texts.
     *     @example
     *     // Create many Texts
     *     const text = await prisma.text.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TextCreateManyArgs>(
      args?: SelectSubset<T, TextCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Text.
     * @param {TextDeleteArgs} args - Arguments to delete one Text.
     * @example
     * // Delete one Text
     * const Text = await prisma.text.delete({
     *   where: {
     *     // ... filter to delete one Text
     *   }
     * })
     * 
    **/
    delete<T extends TextDeleteArgs>(
      args: SelectSubset<T, TextDeleteArgs>
    ): CheckSelect<T, Prisma__TextClient<Text>, Prisma__TextClient<TextGetPayload<T>>>

    /**
     * Update one Text.
     * @param {TextUpdateArgs} args - Arguments to update one Text.
     * @example
     * // Update one Text
     * const text = await prisma.text.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TextUpdateArgs>(
      args: SelectSubset<T, TextUpdateArgs>
    ): CheckSelect<T, Prisma__TextClient<Text>, Prisma__TextClient<TextGetPayload<T>>>

    /**
     * Delete zero or more Texts.
     * @param {TextDeleteManyArgs} args - Arguments to filter Texts to delete.
     * @example
     * // Delete a few Texts
     * const { count } = await prisma.text.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TextDeleteManyArgs>(
      args?: SelectSubset<T, TextDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Texts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Texts
     * const text = await prisma.text.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TextUpdateManyArgs>(
      args: SelectSubset<T, TextUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Text.
     * @param {TextUpsertArgs} args - Arguments to update or create a Text.
     * @example
     * // Update or create a Text
     * const text = await prisma.text.upsert({
     *   create: {
     *     // ... data to create a Text
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Text we want to update
     *   }
     * })
    **/
    upsert<T extends TextUpsertArgs>(
      args: SelectSubset<T, TextUpsertArgs>
    ): CheckSelect<T, Prisma__TextClient<Text>, Prisma__TextClient<TextGetPayload<T>>>

    /**
     * Count the number of Texts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextCountArgs} args - Arguments to filter Texts to count.
     * @example
     * // Count the number of Texts
     * const count = await prisma.text.count({
     *   where: {
     *     // ... the filter for the Texts we want to count
     *   }
     * })
    **/
    count<T extends TextCountArgs>(
      args?: Subset<T, TextCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TextCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Text.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TextAggregateArgs>(args: Subset<T, TextAggregateArgs>): PrismaPromise<GetTextAggregateType<T>>

    /**
     * Group by Text.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TextGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TextGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TextGroupByArgs['orderBy'] }
        : { orderBy?: TextGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TextGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTextGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Text.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TextClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Text findUnique
   */
  export type TextFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * Throw an Error if a Text can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Text to fetch.
     * 
    **/
    where: TextWhereUniqueInput
  }


  /**
   * Text findFirst
   */
  export type TextFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * Throw an Error if a Text can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Text to fetch.
     * 
    **/
    where?: TextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Texts to fetch.
     * 
    **/
    orderBy?: Enumerable<TextOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Texts.
     * 
    **/
    cursor?: TextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Texts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Texts.
     * 
    **/
    distinct?: Enumerable<TextScalarFieldEnum>
  }


  /**
   * Text findMany
   */
  export type TextFindManyArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * Filter, which Texts to fetch.
     * 
    **/
    where?: TextWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Texts to fetch.
     * 
    **/
    orderBy?: Enumerable<TextOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Texts.
     * 
    **/
    cursor?: TextWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Texts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Texts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TextScalarFieldEnum>
  }


  /**
   * Text create
   */
  export type TextCreateArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * The data needed to create a Text.
     * 
    **/
    data: XOR<TextCreateInput, TextUncheckedCreateInput>
  }


  /**
   * Text createMany
   */
  export type TextCreateManyArgs = {
    /**
     * The data used to create many Texts.
     * 
    **/
    data: Enumerable<TextCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Text update
   */
  export type TextUpdateArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * The data needed to update a Text.
     * 
    **/
    data: XOR<TextUpdateInput, TextUncheckedUpdateInput>
    /**
     * Choose, which Text to update.
     * 
    **/
    where: TextWhereUniqueInput
  }


  /**
   * Text updateMany
   */
  export type TextUpdateManyArgs = {
    /**
     * The data used to update Texts.
     * 
    **/
    data: XOR<TextUpdateManyMutationInput, TextUncheckedUpdateManyInput>
    /**
     * Filter which Texts to update
     * 
    **/
    where?: TextWhereInput
  }


  /**
   * Text upsert
   */
  export type TextUpsertArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * The filter to search for the Text to update in case it exists.
     * 
    **/
    where: TextWhereUniqueInput
    /**
     * In case the Text found by the `where` argument doesn't exist, create a new Text with this data.
     * 
    **/
    create: XOR<TextCreateInput, TextUncheckedCreateInput>
    /**
     * In case the Text was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TextUpdateInput, TextUncheckedUpdateInput>
  }


  /**
   * Text delete
   */
  export type TextDeleteArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
    /**
     * Filter which Text to delete.
     * 
    **/
    where: TextWhereUniqueInput
  }


  /**
   * Text deleteMany
   */
  export type TextDeleteManyArgs = {
    /**
     * Filter which Texts to delete
     * 
    **/
    where?: TextWhereInput
  }


  /**
   * Text without action
   */
  export type TextArgs = {
    /**
     * Select specific fields to fetch from the Text
     * 
    **/
    select?: TextSelect | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    phoneNumber: 'phoneNumber',
    picture: 'picture',
    tradeLink: 'tradeLink',
    isAdmin: 'isAdmin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    saldo: 'saldo',
    twitchId: 'twitchId',
    passwordResetToken: 'passwordResetToken',
    tokenExpiration: 'tokenExpiration'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RaffleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    is_active: 'is_active',
    users_quantity: 'users_quantity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    free: 'free'
  };

  export type RaffleScalarFieldEnum = (typeof RaffleScalarFieldEnum)[keyof typeof RaffleScalarFieldEnum]


  export const RaffleSkinScalarFieldEnum: {
    id: 'id',
    raffle_id: 'raffle_id',
    skin_id: 'skin_id',
    winner_id: 'winner_id',
    skinName: 'skinName',
    skinValue: 'skinValue',
    skinType: 'skinType',
    skinPicture: 'skinPicture'
  };

  export type RaffleSkinScalarFieldEnum = (typeof RaffleSkinScalarFieldEnum)[keyof typeof RaffleSkinScalarFieldEnum]


  export const ParticipantScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    raffle_id: 'raffle_id',
    number: 'number'
  };

  export type ParticipantScalarFieldEnum = (typeof ParticipantScalarFieldEnum)[keyof typeof ParticipantScalarFieldEnum]


  export const SkinScalarFieldEnum: {
    id: 'id',
    name: 'name',
    value: 'value',
    type: 'type',
    picture: 'picture'
  };

  export type SkinScalarFieldEnum = (typeof SkinScalarFieldEnum)[keyof typeof SkinScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    token: 'token',
    user_id: 'user_id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    user_id: 'user_id',
    paymentId: 'paymentId',
    status: 'status',
    status_detail: 'status_detail',
    paymentMethod: 'paymentMethod',
    transactionAmount: 'transactionAmount',
    dateCreated: 'dateCreated',
    dateApproved: 'dateApproved',
    dateLastUpdated: 'dateLastUpdated',
    type: 'type',
    raffle_id: 'raffle_id',
    qrCode: 'qrCode',
    qrCodeBase64: 'qrCodeBase64'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const TextScalarFieldEnum: {
    id: 'id',
    text: 'text'
  };

  export type TextScalarFieldEnum = (typeof TextScalarFieldEnum)[keyof typeof TextScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringNullableFilter | string | null
    phoneNumber?: StringNullableFilter | string | null
    picture?: StringNullableFilter | string | null
    tradeLink?: StringNullableFilter | string | null
    isAdmin?: BoolFilter | boolean
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    saldo?: FloatNullableFilter | number | null
    sessions?: SessionListRelationFilter
    Participant?: ParticipantListRelationFilter
    transactions?: TransactionListRelationFilter
    twitchId?: StringNullableFilter | string | null
    passwordResetToken?: StringNullableFilter | string | null
    tokenExpiration?: DateTimeNullableFilter | Date | string | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    picture?: SortOrder
    tradeLink?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    saldo?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    Participant?: ParticipantOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    twitchId?: SortOrder
    passwordResetToken?: SortOrder
    tokenExpiration?: SortOrder
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    name?: string
    twitchId?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    picture?: SortOrder
    tradeLink?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    saldo?: SortOrder
    twitchId?: SortOrder
    passwordResetToken?: SortOrder
    tokenExpiration?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    password?: StringNullableWithAggregatesFilter | string | null
    phoneNumber?: StringNullableWithAggregatesFilter | string | null
    picture?: StringNullableWithAggregatesFilter | string | null
    tradeLink?: StringNullableWithAggregatesFilter | string | null
    isAdmin?: BoolWithAggregatesFilter | boolean
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    saldo?: FloatNullableWithAggregatesFilter | number | null
    twitchId?: StringNullableWithAggregatesFilter | string | null
    passwordResetToken?: StringNullableWithAggregatesFilter | string | null
    tokenExpiration?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type RaffleWhereInput = {
    AND?: Enumerable<RaffleWhereInput>
    OR?: Enumerable<RaffleWhereInput>
    NOT?: Enumerable<RaffleWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    value?: FloatFilter | number
    is_active?: StringFilter | string
    users_quantity?: IntFilter | number
    participants?: ParticipantListRelationFilter
    raffleSkins?: RaffleSkinListRelationFilter
    transactions?: TransactionListRelationFilter
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    free?: BoolNullableFilter | boolean | null
  }

  export type RaffleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    is_active?: SortOrder
    users_quantity?: SortOrder
    participants?: ParticipantOrderByRelationAggregateInput
    raffleSkins?: RaffleSkinOrderByRelationAggregateInput
    transactions?: TransactionOrderByRelationAggregateInput
    createdAt?: SortOrder
    updatedAt?: SortOrder
    free?: SortOrder
  }

  export type RaffleWhereUniqueInput = {
    id?: number
  }

  export type RaffleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    is_active?: SortOrder
    users_quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    free?: SortOrder
    _count?: RaffleCountOrderByAggregateInput
    _avg?: RaffleAvgOrderByAggregateInput
    _max?: RaffleMaxOrderByAggregateInput
    _min?: RaffleMinOrderByAggregateInput
    _sum?: RaffleSumOrderByAggregateInput
  }

  export type RaffleScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RaffleScalarWhereWithAggregatesInput>
    OR?: Enumerable<RaffleScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RaffleScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    value?: FloatWithAggregatesFilter | number
    is_active?: StringWithAggregatesFilter | string
    users_quantity?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    free?: BoolNullableWithAggregatesFilter | boolean | null
  }

  export type RaffleSkinWhereInput = {
    AND?: Enumerable<RaffleSkinWhereInput>
    OR?: Enumerable<RaffleSkinWhereInput>
    NOT?: Enumerable<RaffleSkinWhereInput>
    id?: IntFilter | number
    raffle_id?: IntFilter | number
    raffle?: XOR<RaffleRelationFilter, RaffleWhereInput>
    skin_id?: IntFilter | number
    skin?: XOR<SkinRelationFilter, SkinWhereInput>
    winner?: XOR<ParticipantRelationFilter, ParticipantWhereInput> | null
    winner_id?: IntNullableFilter | number | null
    skinName?: StringFilter | string
    skinValue?: FloatFilter | number
    skinType?: StringFilter | string
    skinPicture?: StringFilter | string
  }

  export type RaffleSkinOrderByWithRelationInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    raffle?: RaffleOrderByWithRelationInput
    skin_id?: SortOrder
    skin?: SkinOrderByWithRelationInput
    winner?: ParticipantOrderByWithRelationInput
    winner_id?: SortOrder
    skinName?: SortOrder
    skinValue?: SortOrder
    skinType?: SortOrder
    skinPicture?: SortOrder
  }

  export type RaffleSkinWhereUniqueInput = {
    id?: number
  }

  export type RaffleSkinOrderByWithAggregationInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    skin_id?: SortOrder
    winner_id?: SortOrder
    skinName?: SortOrder
    skinValue?: SortOrder
    skinType?: SortOrder
    skinPicture?: SortOrder
    _count?: RaffleSkinCountOrderByAggregateInput
    _avg?: RaffleSkinAvgOrderByAggregateInput
    _max?: RaffleSkinMaxOrderByAggregateInput
    _min?: RaffleSkinMinOrderByAggregateInput
    _sum?: RaffleSkinSumOrderByAggregateInput
  }

  export type RaffleSkinScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RaffleSkinScalarWhereWithAggregatesInput>
    OR?: Enumerable<RaffleSkinScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RaffleSkinScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    raffle_id?: IntWithAggregatesFilter | number
    skin_id?: IntWithAggregatesFilter | number
    winner_id?: IntNullableWithAggregatesFilter | number | null
    skinName?: StringWithAggregatesFilter | string
    skinValue?: FloatWithAggregatesFilter | number
    skinType?: StringWithAggregatesFilter | string
    skinPicture?: StringWithAggregatesFilter | string
  }

  export type ParticipantWhereInput = {
    AND?: Enumerable<ParticipantWhereInput>
    OR?: Enumerable<ParticipantWhereInput>
    NOT?: Enumerable<ParticipantWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    raffle_id?: IntFilter | number
    number?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    raffle?: XOR<RaffleRelationFilter, RaffleWhereInput>
    raffleSkins?: RaffleSkinListRelationFilter
  }

  export type ParticipantOrderByWithRelationInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
    user?: UserOrderByWithRelationInput
    raffle?: RaffleOrderByWithRelationInput
    raffleSkins?: RaffleSkinOrderByRelationAggregateInput
  }

  export type ParticipantWhereUniqueInput = {
    id?: number
  }

  export type ParticipantOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
    _count?: ParticipantCountOrderByAggregateInput
    _avg?: ParticipantAvgOrderByAggregateInput
    _max?: ParticipantMaxOrderByAggregateInput
    _min?: ParticipantMinOrderByAggregateInput
    _sum?: ParticipantSumOrderByAggregateInput
  }

  export type ParticipantScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ParticipantScalarWhereWithAggregatesInput>
    OR?: Enumerable<ParticipantScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ParticipantScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    raffle_id?: IntWithAggregatesFilter | number
    number?: IntWithAggregatesFilter | number
  }

  export type SkinWhereInput = {
    AND?: Enumerable<SkinWhereInput>
    OR?: Enumerable<SkinWhereInput>
    NOT?: Enumerable<SkinWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    value?: FloatFilter | number
    type?: StringFilter | string
    picture?: StringFilter | string
    raffleSkins?: RaffleSkinListRelationFilter
  }

  export type SkinOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    type?: SortOrder
    picture?: SortOrder
    raffleSkins?: RaffleSkinOrderByRelationAggregateInput
  }

  export type SkinWhereUniqueInput = {
    id?: number
  }

  export type SkinOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    type?: SortOrder
    picture?: SortOrder
    _count?: SkinCountOrderByAggregateInput
    _avg?: SkinAvgOrderByAggregateInput
    _max?: SkinMaxOrderByAggregateInput
    _min?: SkinMinOrderByAggregateInput
    _sum?: SkinSumOrderByAggregateInput
  }

  export type SkinScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SkinScalarWhereWithAggregatesInput>
    OR?: Enumerable<SkinScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SkinScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    value?: FloatWithAggregatesFilter | number
    type?: StringWithAggregatesFilter | string
    picture?: StringWithAggregatesFilter | string
  }

  export type SessionWhereInput = {
    AND?: Enumerable<SessionWhereInput>
    OR?: Enumerable<SessionWhereInput>
    NOT?: Enumerable<SessionWhereInput>
    id?: IntFilter | number
    token?: StringFilter | string
    user_id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    token?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = {
    id?: number
  }

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    token?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _avg?: SessionAvgOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
    _sum?: SessionSumOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<SessionScalarWhereWithAggregatesInput>
    OR?: Enumerable<SessionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<SessionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    token?: StringWithAggregatesFilter | string
    user_id?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TransactionWhereInput = {
    AND?: Enumerable<TransactionWhereInput>
    OR?: Enumerable<TransactionWhereInput>
    NOT?: Enumerable<TransactionWhereInput>
    id?: IntFilter | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    user_id?: IntFilter | number
    paymentId?: StringNullableFilter | string | null
    status?: StringFilter | string
    status_detail?: StringNullableFilter | string | null
    paymentMethod?: StringFilter | string
    transactionAmount?: FloatFilter | number
    dateCreated?: DateTimeFilter | Date | string
    dateApproved?: DateTimeNullableFilter | Date | string | null
    dateLastUpdated?: DateTimeFilter | Date | string
    type?: StringFilter | string
    raffle_id?: IntNullableFilter | number | null
    raffle?: XOR<RaffleRelationFilter, RaffleWhereInput> | null
    qrCode?: StringNullableFilter | string | null
    qrCodeBase64?: StringNullableFilter | string | null
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    user?: UserOrderByWithRelationInput
    user_id?: SortOrder
    paymentId?: SortOrder
    status?: SortOrder
    status_detail?: SortOrder
    paymentMethod?: SortOrder
    transactionAmount?: SortOrder
    dateCreated?: SortOrder
    dateApproved?: SortOrder
    dateLastUpdated?: SortOrder
    type?: SortOrder
    raffle_id?: SortOrder
    raffle?: RaffleOrderByWithRelationInput
    qrCode?: SortOrder
    qrCodeBase64?: SortOrder
  }

  export type TransactionWhereUniqueInput = {
    id?: number
    paymentId?: string
  }

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    user_id?: SortOrder
    paymentId?: SortOrder
    status?: SortOrder
    status_detail?: SortOrder
    paymentMethod?: SortOrder
    transactionAmount?: SortOrder
    dateCreated?: SortOrder
    dateApproved?: SortOrder
    dateLastUpdated?: SortOrder
    type?: SortOrder
    raffle_id?: SortOrder
    qrCode?: SortOrder
    qrCodeBase64?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    OR?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TransactionScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    user_id?: IntWithAggregatesFilter | number
    paymentId?: StringNullableWithAggregatesFilter | string | null
    status?: StringWithAggregatesFilter | string
    status_detail?: StringNullableWithAggregatesFilter | string | null
    paymentMethod?: StringWithAggregatesFilter | string
    transactionAmount?: FloatWithAggregatesFilter | number
    dateCreated?: DateTimeWithAggregatesFilter | Date | string
    dateApproved?: DateTimeNullableWithAggregatesFilter | Date | string | null
    dateLastUpdated?: DateTimeWithAggregatesFilter | Date | string
    type?: StringWithAggregatesFilter | string
    raffle_id?: IntNullableWithAggregatesFilter | number | null
    qrCode?: StringNullableWithAggregatesFilter | string | null
    qrCodeBase64?: StringNullableWithAggregatesFilter | string | null
  }

  export type TextWhereInput = {
    AND?: Enumerable<TextWhereInput>
    OR?: Enumerable<TextWhereInput>
    NOT?: Enumerable<TextWhereInput>
    id?: IntFilter | number
    text?: StringFilter | string
  }

  export type TextOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type TextWhereUniqueInput = {
    id?: number
  }

  export type TextOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    _count?: TextCountOrderByAggregateInput
    _avg?: TextAvgOrderByAggregateInput
    _max?: TextMaxOrderByAggregateInput
    _min?: TextMinOrderByAggregateInput
    _sum?: TextSumOrderByAggregateInput
  }

  export type TextScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TextScalarWhereWithAggregatesInput>
    OR?: Enumerable<TextScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TextScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    text?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    Participant?: ParticipantCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Participant?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    sessions?: SessionUpdateManyWithoutUserInput
    Participant?: ParticipantUpdateManyWithoutUserInput
    transactions?: TransactionUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    Participant?: ParticipantUncheckedUpdateManyWithoutUserInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RaffleCreateInput = {
    name: string
    value: number
    is_active?: string
    users_quantity: number
    participants?: ParticipantCreateNestedManyWithoutRaffleInput
    raffleSkins?: RaffleSkinCreateNestedManyWithoutRaffleInput
    transactions?: TransactionCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleUncheckedCreateInput = {
    id?: number
    name: string
    value: number
    is_active?: string
    users_quantity: number
    participants?: ParticipantUncheckedCreateNestedManyWithoutRaffleInput
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutRaffleInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    participants?: ParticipantUpdateManyWithoutRaffleInput
    raffleSkins?: RaffleSkinUpdateManyWithoutRaffleInput
    transactions?: TransactionUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    participants?: ParticipantUncheckedUpdateManyWithoutRaffleInput
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutRaffleInput
    transactions?: TransactionUncheckedUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleCreateManyInput = {
    id?: number
    name: string
    value: number
    is_active?: string
    users_quantity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleSkinCreateInput = {
    raffle: RaffleCreateNestedOneWithoutRaffleSkinsInput
    skin: SkinCreateNestedOneWithoutRaffleSkinsInput
    winner?: ParticipantCreateNestedOneWithoutRaffleSkinsInput
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUncheckedCreateInput = {
    id?: number
    raffle_id: number
    skin_id: number
    winner_id?: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUpdateInput = {
    raffle?: RaffleUpdateOneRequiredWithoutRaffleSkinsInput
    skin?: SkinUpdateOneRequiredWithoutRaffleSkinsInput
    winner?: ParticipantUpdateOneWithoutRaffleSkinsInput
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    skin_id?: IntFieldUpdateOperationsInput | number
    winner_id?: NullableIntFieldUpdateOperationsInput | number | null
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinCreateManyInput = {
    id?: number
    raffle_id: number
    skin_id: number
    winner_id?: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUpdateManyMutationInput = {
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    skin_id?: IntFieldUpdateOperationsInput | number
    winner_id?: NullableIntFieldUpdateOperationsInput | number | null
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type ParticipantCreateInput = {
    number: number
    user: UserCreateNestedOneWithoutParticipantInput
    raffle: RaffleCreateNestedOneWithoutParticipantsInput
    raffleSkins?: RaffleSkinCreateNestedManyWithoutWinnerInput
  }

  export type ParticipantUncheckedCreateInput = {
    id?: number
    user_id: number
    raffle_id: number
    number: number
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ParticipantUpdateInput = {
    number?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipantInput
    raffle?: RaffleUpdateOneRequiredWithoutParticipantsInput
    raffleSkins?: RaffleSkinUpdateManyWithoutWinnerInput
  }

  export type ParticipantUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutWinnerInput
  }

  export type ParticipantCreateManyInput = {
    id?: number
    user_id: number
    raffle_id: number
    number: number
  }

  export type ParticipantUpdateManyMutationInput = {
    number?: IntFieldUpdateOperationsInput | number
  }

  export type ParticipantUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type SkinCreateInput = {
    name: string
    value: number
    type: string
    picture: string
    raffleSkins?: RaffleSkinCreateNestedManyWithoutSkinInput
  }

  export type SkinUncheckedCreateInput = {
    id?: number
    name: string
    value: number
    type: string
    picture: string
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutSkinInput
  }

  export type SkinUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    raffleSkins?: RaffleSkinUpdateManyWithoutSkinInput
  }

  export type SkinUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutSkinInput
  }

  export type SkinCreateManyInput = {
    id?: number
    name: string
    value: number
    type: string
    picture: string
  }

  export type SkinUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type SkinUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: number
    token: string
    user_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: number
    token: string
    user_id: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    user_id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    user: UserCreateNestedOneWithoutTransactionsInput
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    raffle?: RaffleCreateNestedOneWithoutTransactionsInput
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    user_id: number
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    raffle_id?: number | null
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutTransactionsInput
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    raffle?: RaffleUpdateOneWithoutTransactionsInput
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    raffle_id?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionCreateManyInput = {
    id?: number
    user_id: number
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    raffle_id?: number | null
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionUpdateManyMutationInput = {
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    raffle_id?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TextCreateInput = {
    text: string
  }

  export type TextUncheckedCreateInput = {
    id?: number
    text: string
  }

  export type TextUpdateInput = {
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TextUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TextCreateManyInput = {
    id?: number
    text: string
  }

  export type TextUpdateManyMutationInput = {
    text?: StringFieldUpdateOperationsInput | string
  }

  export type TextUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    text?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type FloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type ParticipantListRelationFilter = {
    every?: ParticipantWhereInput
    some?: ParticipantWhereInput
    none?: ParticipantWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ParticipantOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    picture?: SortOrder
    tradeLink?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    saldo?: SortOrder
    twitchId?: SortOrder
    passwordResetToken?: SortOrder
    tokenExpiration?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    picture?: SortOrder
    tradeLink?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    saldo?: SortOrder
    twitchId?: SortOrder
    passwordResetToken?: SortOrder
    tokenExpiration?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    picture?: SortOrder
    tradeLink?: SortOrder
    isAdmin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    saldo?: SortOrder
    twitchId?: SortOrder
    passwordResetToken?: SortOrder
    tokenExpiration?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    saldo?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type FloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type RaffleSkinListRelationFilter = {
    every?: RaffleSkinWhereInput
    some?: RaffleSkinWhereInput
    none?: RaffleSkinWhereInput
  }

  export type BoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type RaffleSkinOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RaffleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    is_active?: SortOrder
    users_quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    free?: SortOrder
  }

  export type RaffleAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    users_quantity?: SortOrder
  }

  export type RaffleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    is_active?: SortOrder
    users_quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    free?: SortOrder
  }

  export type RaffleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    is_active?: SortOrder
    users_quantity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    free?: SortOrder
  }

  export type RaffleSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
    users_quantity?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type BoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type RaffleRelationFilter = {
    is?: RaffleWhereInput
    isNot?: RaffleWhereInput
  }

  export type SkinRelationFilter = {
    is?: SkinWhereInput
    isNot?: SkinWhereInput
  }

  export type ParticipantRelationFilter = {
    is?: ParticipantWhereInput | null
    isNot?: ParticipantWhereInput | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type RaffleSkinCountOrderByAggregateInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    skin_id?: SortOrder
    winner_id?: SortOrder
    skinName?: SortOrder
    skinValue?: SortOrder
    skinType?: SortOrder
    skinPicture?: SortOrder
  }

  export type RaffleSkinAvgOrderByAggregateInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    skin_id?: SortOrder
    winner_id?: SortOrder
    skinValue?: SortOrder
  }

  export type RaffleSkinMaxOrderByAggregateInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    skin_id?: SortOrder
    winner_id?: SortOrder
    skinName?: SortOrder
    skinValue?: SortOrder
    skinType?: SortOrder
    skinPicture?: SortOrder
  }

  export type RaffleSkinMinOrderByAggregateInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    skin_id?: SortOrder
    winner_id?: SortOrder
    skinName?: SortOrder
    skinValue?: SortOrder
    skinType?: SortOrder
    skinPicture?: SortOrder
  }

  export type RaffleSkinSumOrderByAggregateInput = {
    id?: SortOrder
    raffle_id?: SortOrder
    skin_id?: SortOrder
    winner_id?: SortOrder
    skinValue?: SortOrder
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ParticipantCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
  }

  export type ParticipantAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
  }

  export type ParticipantMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
  }

  export type ParticipantMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
  }

  export type ParticipantSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    raffle_id?: SortOrder
    number?: SortOrder
  }

  export type SkinCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    type?: SortOrder
    picture?: SortOrder
  }

  export type SkinAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type SkinMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    type?: SortOrder
    picture?: SortOrder
  }

  export type SkinMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    value?: SortOrder
    type?: SortOrder
    picture?: SortOrder
  }

  export type SkinSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    token?: SortOrder
    user_id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    paymentId?: SortOrder
    status?: SortOrder
    status_detail?: SortOrder
    paymentMethod?: SortOrder
    transactionAmount?: SortOrder
    dateCreated?: SortOrder
    dateApproved?: SortOrder
    dateLastUpdated?: SortOrder
    type?: SortOrder
    raffle_id?: SortOrder
    qrCode?: SortOrder
    qrCodeBase64?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    transactionAmount?: SortOrder
    raffle_id?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    paymentId?: SortOrder
    status?: SortOrder
    status_detail?: SortOrder
    paymentMethod?: SortOrder
    transactionAmount?: SortOrder
    dateCreated?: SortOrder
    dateApproved?: SortOrder
    dateLastUpdated?: SortOrder
    type?: SortOrder
    raffle_id?: SortOrder
    qrCode?: SortOrder
    qrCodeBase64?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    paymentId?: SortOrder
    status?: SortOrder
    status_detail?: SortOrder
    paymentMethod?: SortOrder
    transactionAmount?: SortOrder
    dateCreated?: SortOrder
    dateApproved?: SortOrder
    dateLastUpdated?: SortOrder
    type?: SortOrder
    raffle_id?: SortOrder
    qrCode?: SortOrder
    qrCodeBase64?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    user_id?: SortOrder
    transactionAmount?: SortOrder
    raffle_id?: SortOrder
  }

  export type TextCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type TextAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TextMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type TextMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
  }

  export type TextSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type ParticipantCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutUserInput>, Enumerable<ParticipantUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutUserInput>
    createMany?: ParticipantCreateManyUserInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type TransactionCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: Enumerable<SessionWhereUniqueInput>
  }

  export type ParticipantUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutUserInput>, Enumerable<ParticipantUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutUserInput>
    createMany?: ParticipantCreateManyUserInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type ParticipantUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutUserInput>, Enumerable<ParticipantUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ParticipantCreateManyUserInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type TransactionUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<SessionCreateWithoutUserInput>, Enumerable<SessionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<SessionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<SessionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: SessionCreateManyUserInputEnvelope
    set?: Enumerable<SessionWhereUniqueInput>
    disconnect?: Enumerable<SessionWhereUniqueInput>
    delete?: Enumerable<SessionWhereUniqueInput>
    connect?: Enumerable<SessionWhereUniqueInput>
    update?: Enumerable<SessionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<SessionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<SessionScalarWhereInput>
  }

  export type ParticipantUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutUserInput>, Enumerable<ParticipantUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ParticipantCreateManyUserInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutUserInput>, Enumerable<TransactionUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutUserInput>
    createMany?: TransactionCreateManyUserInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type ParticipantCreateNestedManyWithoutRaffleInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutRaffleInput>, Enumerable<ParticipantUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutRaffleInput>
    createMany?: ParticipantCreateManyRaffleInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type RaffleSkinCreateNestedManyWithoutRaffleInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutRaffleInput>, Enumerable<RaffleSkinUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutRaffleInput>
    createMany?: RaffleSkinCreateManyRaffleInputEnvelope
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
  }

  export type TransactionCreateNestedManyWithoutRaffleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutRaffleInput>, Enumerable<TransactionUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutRaffleInput>
    createMany?: TransactionCreateManyRaffleInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type ParticipantUncheckedCreateNestedManyWithoutRaffleInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutRaffleInput>, Enumerable<ParticipantUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutRaffleInput>
    createMany?: ParticipantCreateManyRaffleInputEnvelope
    connect?: Enumerable<ParticipantWhereUniqueInput>
  }

  export type RaffleSkinUncheckedCreateNestedManyWithoutRaffleInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutRaffleInput>, Enumerable<RaffleSkinUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutRaffleInput>
    createMany?: RaffleSkinCreateManyRaffleInputEnvelope
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
  }

  export type TransactionUncheckedCreateNestedManyWithoutRaffleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutRaffleInput>, Enumerable<TransactionUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutRaffleInput>
    createMany?: TransactionCreateManyRaffleInputEnvelope
    connect?: Enumerable<TransactionWhereUniqueInput>
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ParticipantUpdateManyWithoutRaffleInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutRaffleInput>, Enumerable<ParticipantUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutRaffleInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutRaffleInput>
    createMany?: ParticipantCreateManyRaffleInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutRaffleInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutRaffleInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type RaffleSkinUpdateManyWithoutRaffleInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutRaffleInput>, Enumerable<RaffleSkinUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutRaffleInput>
    upsert?: Enumerable<RaffleSkinUpsertWithWhereUniqueWithoutRaffleInput>
    createMany?: RaffleSkinCreateManyRaffleInputEnvelope
    set?: Enumerable<RaffleSkinWhereUniqueInput>
    disconnect?: Enumerable<RaffleSkinWhereUniqueInput>
    delete?: Enumerable<RaffleSkinWhereUniqueInput>
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
    update?: Enumerable<RaffleSkinUpdateWithWhereUniqueWithoutRaffleInput>
    updateMany?: Enumerable<RaffleSkinUpdateManyWithWhereWithoutRaffleInput>
    deleteMany?: Enumerable<RaffleSkinScalarWhereInput>
  }

  export type TransactionUpdateManyWithoutRaffleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutRaffleInput>, Enumerable<TransactionUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutRaffleInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutRaffleInput>
    createMany?: TransactionCreateManyRaffleInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutRaffleInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutRaffleInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type ParticipantUncheckedUpdateManyWithoutRaffleInput = {
    create?: XOR<Enumerable<ParticipantCreateWithoutRaffleInput>, Enumerable<ParticipantUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<ParticipantCreateOrConnectWithoutRaffleInput>
    upsert?: Enumerable<ParticipantUpsertWithWhereUniqueWithoutRaffleInput>
    createMany?: ParticipantCreateManyRaffleInputEnvelope
    set?: Enumerable<ParticipantWhereUniqueInput>
    disconnect?: Enumerable<ParticipantWhereUniqueInput>
    delete?: Enumerable<ParticipantWhereUniqueInput>
    connect?: Enumerable<ParticipantWhereUniqueInput>
    update?: Enumerable<ParticipantUpdateWithWhereUniqueWithoutRaffleInput>
    updateMany?: Enumerable<ParticipantUpdateManyWithWhereWithoutRaffleInput>
    deleteMany?: Enumerable<ParticipantScalarWhereInput>
  }

  export type RaffleSkinUncheckedUpdateManyWithoutRaffleInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutRaffleInput>, Enumerable<RaffleSkinUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutRaffleInput>
    upsert?: Enumerable<RaffleSkinUpsertWithWhereUniqueWithoutRaffleInput>
    createMany?: RaffleSkinCreateManyRaffleInputEnvelope
    set?: Enumerable<RaffleSkinWhereUniqueInput>
    disconnect?: Enumerable<RaffleSkinWhereUniqueInput>
    delete?: Enumerable<RaffleSkinWhereUniqueInput>
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
    update?: Enumerable<RaffleSkinUpdateWithWhereUniqueWithoutRaffleInput>
    updateMany?: Enumerable<RaffleSkinUpdateManyWithWhereWithoutRaffleInput>
    deleteMany?: Enumerable<RaffleSkinScalarWhereInput>
  }

  export type TransactionUncheckedUpdateManyWithoutRaffleInput = {
    create?: XOR<Enumerable<TransactionCreateWithoutRaffleInput>, Enumerable<TransactionUncheckedCreateWithoutRaffleInput>>
    connectOrCreate?: Enumerable<TransactionCreateOrConnectWithoutRaffleInput>
    upsert?: Enumerable<TransactionUpsertWithWhereUniqueWithoutRaffleInput>
    createMany?: TransactionCreateManyRaffleInputEnvelope
    set?: Enumerable<TransactionWhereUniqueInput>
    disconnect?: Enumerable<TransactionWhereUniqueInput>
    delete?: Enumerable<TransactionWhereUniqueInput>
    connect?: Enumerable<TransactionWhereUniqueInput>
    update?: Enumerable<TransactionUpdateWithWhereUniqueWithoutRaffleInput>
    updateMany?: Enumerable<TransactionUpdateManyWithWhereWithoutRaffleInput>
    deleteMany?: Enumerable<TransactionScalarWhereInput>
  }

  export type RaffleCreateNestedOneWithoutRaffleSkinsInput = {
    create?: XOR<RaffleCreateWithoutRaffleSkinsInput, RaffleUncheckedCreateWithoutRaffleSkinsInput>
    connectOrCreate?: RaffleCreateOrConnectWithoutRaffleSkinsInput
    connect?: RaffleWhereUniqueInput
  }

  export type SkinCreateNestedOneWithoutRaffleSkinsInput = {
    create?: XOR<SkinCreateWithoutRaffleSkinsInput, SkinUncheckedCreateWithoutRaffleSkinsInput>
    connectOrCreate?: SkinCreateOrConnectWithoutRaffleSkinsInput
    connect?: SkinWhereUniqueInput
  }

  export type ParticipantCreateNestedOneWithoutRaffleSkinsInput = {
    create?: XOR<ParticipantCreateWithoutRaffleSkinsInput, ParticipantUncheckedCreateWithoutRaffleSkinsInput>
    connectOrCreate?: ParticipantCreateOrConnectWithoutRaffleSkinsInput
    connect?: ParticipantWhereUniqueInput
  }

  export type RaffleUpdateOneRequiredWithoutRaffleSkinsInput = {
    create?: XOR<RaffleCreateWithoutRaffleSkinsInput, RaffleUncheckedCreateWithoutRaffleSkinsInput>
    connectOrCreate?: RaffleCreateOrConnectWithoutRaffleSkinsInput
    upsert?: RaffleUpsertWithoutRaffleSkinsInput
    connect?: RaffleWhereUniqueInput
    update?: XOR<RaffleUpdateWithoutRaffleSkinsInput, RaffleUncheckedUpdateWithoutRaffleSkinsInput>
  }

  export type SkinUpdateOneRequiredWithoutRaffleSkinsInput = {
    create?: XOR<SkinCreateWithoutRaffleSkinsInput, SkinUncheckedCreateWithoutRaffleSkinsInput>
    connectOrCreate?: SkinCreateOrConnectWithoutRaffleSkinsInput
    upsert?: SkinUpsertWithoutRaffleSkinsInput
    connect?: SkinWhereUniqueInput
    update?: XOR<SkinUpdateWithoutRaffleSkinsInput, SkinUncheckedUpdateWithoutRaffleSkinsInput>
  }

  export type ParticipantUpdateOneWithoutRaffleSkinsInput = {
    create?: XOR<ParticipantCreateWithoutRaffleSkinsInput, ParticipantUncheckedCreateWithoutRaffleSkinsInput>
    connectOrCreate?: ParticipantCreateOrConnectWithoutRaffleSkinsInput
    upsert?: ParticipantUpsertWithoutRaffleSkinsInput
    disconnect?: boolean
    delete?: boolean
    connect?: ParticipantWhereUniqueInput
    update?: XOR<ParticipantUpdateWithoutRaffleSkinsInput, ParticipantUncheckedUpdateWithoutRaffleSkinsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutParticipantInput = {
    create?: XOR<UserCreateWithoutParticipantInput, UserUncheckedCreateWithoutParticipantInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipantInput
    connect?: UserWhereUniqueInput
  }

  export type RaffleCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<RaffleCreateWithoutParticipantsInput, RaffleUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: RaffleCreateOrConnectWithoutParticipantsInput
    connect?: RaffleWhereUniqueInput
  }

  export type RaffleSkinCreateNestedManyWithoutWinnerInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutWinnerInput>, Enumerable<RaffleSkinUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutWinnerInput>
    createMany?: RaffleSkinCreateManyWinnerInputEnvelope
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
  }

  export type RaffleSkinUncheckedCreateNestedManyWithoutWinnerInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutWinnerInput>, Enumerable<RaffleSkinUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutWinnerInput>
    createMany?: RaffleSkinCreateManyWinnerInputEnvelope
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutParticipantInput = {
    create?: XOR<UserCreateWithoutParticipantInput, UserUncheckedCreateWithoutParticipantInput>
    connectOrCreate?: UserCreateOrConnectWithoutParticipantInput
    upsert?: UserUpsertWithoutParticipantInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutParticipantInput, UserUncheckedUpdateWithoutParticipantInput>
  }

  export type RaffleUpdateOneRequiredWithoutParticipantsInput = {
    create?: XOR<RaffleCreateWithoutParticipantsInput, RaffleUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: RaffleCreateOrConnectWithoutParticipantsInput
    upsert?: RaffleUpsertWithoutParticipantsInput
    connect?: RaffleWhereUniqueInput
    update?: XOR<RaffleUpdateWithoutParticipantsInput, RaffleUncheckedUpdateWithoutParticipantsInput>
  }

  export type RaffleSkinUpdateManyWithoutWinnerInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutWinnerInput>, Enumerable<RaffleSkinUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutWinnerInput>
    upsert?: Enumerable<RaffleSkinUpsertWithWhereUniqueWithoutWinnerInput>
    createMany?: RaffleSkinCreateManyWinnerInputEnvelope
    set?: Enumerable<RaffleSkinWhereUniqueInput>
    disconnect?: Enumerable<RaffleSkinWhereUniqueInput>
    delete?: Enumerable<RaffleSkinWhereUniqueInput>
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
    update?: Enumerable<RaffleSkinUpdateWithWhereUniqueWithoutWinnerInput>
    updateMany?: Enumerable<RaffleSkinUpdateManyWithWhereWithoutWinnerInput>
    deleteMany?: Enumerable<RaffleSkinScalarWhereInput>
  }

  export type RaffleSkinUncheckedUpdateManyWithoutWinnerInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutWinnerInput>, Enumerable<RaffleSkinUncheckedCreateWithoutWinnerInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutWinnerInput>
    upsert?: Enumerable<RaffleSkinUpsertWithWhereUniqueWithoutWinnerInput>
    createMany?: RaffleSkinCreateManyWinnerInputEnvelope
    set?: Enumerable<RaffleSkinWhereUniqueInput>
    disconnect?: Enumerable<RaffleSkinWhereUniqueInput>
    delete?: Enumerable<RaffleSkinWhereUniqueInput>
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
    update?: Enumerable<RaffleSkinUpdateWithWhereUniqueWithoutWinnerInput>
    updateMany?: Enumerable<RaffleSkinUpdateManyWithWhereWithoutWinnerInput>
    deleteMany?: Enumerable<RaffleSkinScalarWhereInput>
  }

  export type RaffleSkinCreateNestedManyWithoutSkinInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutSkinInput>, Enumerable<RaffleSkinUncheckedCreateWithoutSkinInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutSkinInput>
    createMany?: RaffleSkinCreateManySkinInputEnvelope
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
  }

  export type RaffleSkinUncheckedCreateNestedManyWithoutSkinInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutSkinInput>, Enumerable<RaffleSkinUncheckedCreateWithoutSkinInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutSkinInput>
    createMany?: RaffleSkinCreateManySkinInputEnvelope
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
  }

  export type RaffleSkinUpdateManyWithoutSkinInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutSkinInput>, Enumerable<RaffleSkinUncheckedCreateWithoutSkinInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutSkinInput>
    upsert?: Enumerable<RaffleSkinUpsertWithWhereUniqueWithoutSkinInput>
    createMany?: RaffleSkinCreateManySkinInputEnvelope
    set?: Enumerable<RaffleSkinWhereUniqueInput>
    disconnect?: Enumerable<RaffleSkinWhereUniqueInput>
    delete?: Enumerable<RaffleSkinWhereUniqueInput>
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
    update?: Enumerable<RaffleSkinUpdateWithWhereUniqueWithoutSkinInput>
    updateMany?: Enumerable<RaffleSkinUpdateManyWithWhereWithoutSkinInput>
    deleteMany?: Enumerable<RaffleSkinScalarWhereInput>
  }

  export type RaffleSkinUncheckedUpdateManyWithoutSkinInput = {
    create?: XOR<Enumerable<RaffleSkinCreateWithoutSkinInput>, Enumerable<RaffleSkinUncheckedCreateWithoutSkinInput>>
    connectOrCreate?: Enumerable<RaffleSkinCreateOrConnectWithoutSkinInput>
    upsert?: Enumerable<RaffleSkinUpsertWithWhereUniqueWithoutSkinInput>
    createMany?: RaffleSkinCreateManySkinInputEnvelope
    set?: Enumerable<RaffleSkinWhereUniqueInput>
    disconnect?: Enumerable<RaffleSkinWhereUniqueInput>
    delete?: Enumerable<RaffleSkinWhereUniqueInput>
    connect?: Enumerable<RaffleSkinWhereUniqueInput>
    update?: Enumerable<RaffleSkinUpdateWithWhereUniqueWithoutSkinInput>
    updateMany?: Enumerable<RaffleSkinUpdateManyWithWhereWithoutSkinInput>
    deleteMany?: Enumerable<RaffleSkinScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    connect?: UserWhereUniqueInput
  }

  export type RaffleCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<RaffleCreateWithoutTransactionsInput, RaffleUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: RaffleCreateOrConnectWithoutTransactionsInput
    connect?: RaffleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutTransactionsInput = {
    create?: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutTransactionsInput
    upsert?: UserUpsertWithoutTransactionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
  }

  export type RaffleUpdateOneWithoutTransactionsInput = {
    create?: XOR<RaffleCreateWithoutTransactionsInput, RaffleUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: RaffleCreateOrConnectWithoutTransactionsInput
    upsert?: RaffleUpsertWithoutTransactionsInput
    disconnect?: boolean
    delete?: boolean
    connect?: RaffleWhereUniqueInput
    update?: XOR<RaffleUpdateWithoutTransactionsInput, RaffleUncheckedUpdateWithoutTransactionsInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedFloatNullableFilter
    _min?: NestedFloatNullableFilter
    _max?: NestedFloatNullableFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedBoolNullableFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableFilter | boolean | null
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type NestedBoolNullableWithAggregatesFilter = {
    equals?: boolean | null
    not?: NestedBoolNullableWithAggregatesFilter | boolean | null
    _count?: NestedIntNullableFilter
    _min?: NestedBoolNullableFilter
    _max?: NestedBoolNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type SessionCreateWithoutUserInput = {
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: Enumerable<SessionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ParticipantCreateWithoutUserInput = {
    number: number
    raffle: RaffleCreateNestedOneWithoutParticipantsInput
    raffleSkins?: RaffleSkinCreateNestedManyWithoutWinnerInput
  }

  export type ParticipantUncheckedCreateWithoutUserInput = {
    id?: number
    raffle_id: number
    number: number
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ParticipantCreateOrConnectWithoutUserInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput>
  }

  export type ParticipantCreateManyUserInputEnvelope = {
    data: Enumerable<ParticipantCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutUserInput = {
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    raffle?: RaffleCreateNestedOneWithoutTransactionsInput
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionUncheckedCreateWithoutUserInput = {
    id?: number
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    raffle_id?: number | null
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionCreateOrConnectWithoutUserInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionCreateManyUserInputEnvelope = {
    data: Enumerable<TransactionCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutSessionsInput>
  }

  export type SessionScalarWhereInput = {
    AND?: Enumerable<SessionScalarWhereInput>
    OR?: Enumerable<SessionScalarWhereInput>
    NOT?: Enumerable<SessionScalarWhereInput>
    id?: IntFilter | number
    token?: StringFilter | string
    user_id?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type ParticipantUpsertWithWhereUniqueWithoutUserInput = {
    where: ParticipantWhereUniqueInput
    update: XOR<ParticipantUpdateWithoutUserInput, ParticipantUncheckedUpdateWithoutUserInput>
    create: XOR<ParticipantCreateWithoutUserInput, ParticipantUncheckedCreateWithoutUserInput>
  }

  export type ParticipantUpdateWithWhereUniqueWithoutUserInput = {
    where: ParticipantWhereUniqueInput
    data: XOR<ParticipantUpdateWithoutUserInput, ParticipantUncheckedUpdateWithoutUserInput>
  }

  export type ParticipantUpdateManyWithWhereWithoutUserInput = {
    where: ParticipantScalarWhereInput
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyWithoutParticipantInput>
  }

  export type ParticipantScalarWhereInput = {
    AND?: Enumerable<ParticipantScalarWhereInput>
    OR?: Enumerable<ParticipantScalarWhereInput>
    NOT?: Enumerable<ParticipantScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    raffle_id?: IntFilter | number
    number?: IntFilter | number
  }

  export type TransactionUpsertWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
    create: XOR<TransactionCreateWithoutUserInput, TransactionUncheckedCreateWithoutUserInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutUserInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutUserInput, TransactionUncheckedUpdateWithoutUserInput>
  }

  export type TransactionUpdateManyWithWhereWithoutUserInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: Enumerable<TransactionScalarWhereInput>
    OR?: Enumerable<TransactionScalarWhereInput>
    NOT?: Enumerable<TransactionScalarWhereInput>
    id?: IntFilter | number
    user_id?: IntFilter | number
    paymentId?: StringNullableFilter | string | null
    status?: StringFilter | string
    status_detail?: StringNullableFilter | string | null
    paymentMethod?: StringFilter | string
    transactionAmount?: FloatFilter | number
    dateCreated?: DateTimeFilter | Date | string
    dateApproved?: DateTimeNullableFilter | Date | string | null
    dateLastUpdated?: DateTimeFilter | Date | string
    type?: StringFilter | string
    raffle_id?: IntNullableFilter | number | null
    qrCode?: StringNullableFilter | string | null
    qrCodeBase64?: StringNullableFilter | string | null
  }

  export type ParticipantCreateWithoutRaffleInput = {
    number: number
    user: UserCreateNestedOneWithoutParticipantInput
    raffleSkins?: RaffleSkinCreateNestedManyWithoutWinnerInput
  }

  export type ParticipantUncheckedCreateWithoutRaffleInput = {
    id?: number
    user_id: number
    number: number
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutWinnerInput
  }

  export type ParticipantCreateOrConnectWithoutRaffleInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutRaffleInput, ParticipantUncheckedCreateWithoutRaffleInput>
  }

  export type ParticipantCreateManyRaffleInputEnvelope = {
    data: Enumerable<ParticipantCreateManyRaffleInput>
    skipDuplicates?: boolean
  }

  export type RaffleSkinCreateWithoutRaffleInput = {
    skin: SkinCreateNestedOneWithoutRaffleSkinsInput
    winner?: ParticipantCreateNestedOneWithoutRaffleSkinsInput
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUncheckedCreateWithoutRaffleInput = {
    id?: number
    skin_id: number
    winner_id?: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinCreateOrConnectWithoutRaffleInput = {
    where: RaffleSkinWhereUniqueInput
    create: XOR<RaffleSkinCreateWithoutRaffleInput, RaffleSkinUncheckedCreateWithoutRaffleInput>
  }

  export type RaffleSkinCreateManyRaffleInputEnvelope = {
    data: Enumerable<RaffleSkinCreateManyRaffleInput>
    skipDuplicates?: boolean
  }

  export type TransactionCreateWithoutRaffleInput = {
    user: UserCreateNestedOneWithoutTransactionsInput
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionUncheckedCreateWithoutRaffleInput = {
    id?: number
    user_id: number
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type TransactionCreateOrConnectWithoutRaffleInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutRaffleInput, TransactionUncheckedCreateWithoutRaffleInput>
  }

  export type TransactionCreateManyRaffleInputEnvelope = {
    data: Enumerable<TransactionCreateManyRaffleInput>
    skipDuplicates?: boolean
  }

  export type ParticipantUpsertWithWhereUniqueWithoutRaffleInput = {
    where: ParticipantWhereUniqueInput
    update: XOR<ParticipantUpdateWithoutRaffleInput, ParticipantUncheckedUpdateWithoutRaffleInput>
    create: XOR<ParticipantCreateWithoutRaffleInput, ParticipantUncheckedCreateWithoutRaffleInput>
  }

  export type ParticipantUpdateWithWhereUniqueWithoutRaffleInput = {
    where: ParticipantWhereUniqueInput
    data: XOR<ParticipantUpdateWithoutRaffleInput, ParticipantUncheckedUpdateWithoutRaffleInput>
  }

  export type ParticipantUpdateManyWithWhereWithoutRaffleInput = {
    where: ParticipantScalarWhereInput
    data: XOR<ParticipantUpdateManyMutationInput, ParticipantUncheckedUpdateManyWithoutParticipantsInput>
  }

  export type RaffleSkinUpsertWithWhereUniqueWithoutRaffleInput = {
    where: RaffleSkinWhereUniqueInput
    update: XOR<RaffleSkinUpdateWithoutRaffleInput, RaffleSkinUncheckedUpdateWithoutRaffleInput>
    create: XOR<RaffleSkinCreateWithoutRaffleInput, RaffleSkinUncheckedCreateWithoutRaffleInput>
  }

  export type RaffleSkinUpdateWithWhereUniqueWithoutRaffleInput = {
    where: RaffleSkinWhereUniqueInput
    data: XOR<RaffleSkinUpdateWithoutRaffleInput, RaffleSkinUncheckedUpdateWithoutRaffleInput>
  }

  export type RaffleSkinUpdateManyWithWhereWithoutRaffleInput = {
    where: RaffleSkinScalarWhereInput
    data: XOR<RaffleSkinUpdateManyMutationInput, RaffleSkinUncheckedUpdateManyWithoutRaffleSkinsInput>
  }

  export type RaffleSkinScalarWhereInput = {
    AND?: Enumerable<RaffleSkinScalarWhereInput>
    OR?: Enumerable<RaffleSkinScalarWhereInput>
    NOT?: Enumerable<RaffleSkinScalarWhereInput>
    id?: IntFilter | number
    raffle_id?: IntFilter | number
    skin_id?: IntFilter | number
    winner_id?: IntNullableFilter | number | null
    skinName?: StringFilter | string
    skinValue?: FloatFilter | number
    skinType?: StringFilter | string
    skinPicture?: StringFilter | string
  }

  export type TransactionUpsertWithWhereUniqueWithoutRaffleInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutRaffleInput, TransactionUncheckedUpdateWithoutRaffleInput>
    create: XOR<TransactionCreateWithoutRaffleInput, TransactionUncheckedCreateWithoutRaffleInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutRaffleInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutRaffleInput, TransactionUncheckedUpdateWithoutRaffleInput>
  }

  export type TransactionUpdateManyWithWhereWithoutRaffleInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type RaffleCreateWithoutRaffleSkinsInput = {
    name: string
    value: number
    is_active?: string
    users_quantity: number
    participants?: ParticipantCreateNestedManyWithoutRaffleInput
    transactions?: TransactionCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleUncheckedCreateWithoutRaffleSkinsInput = {
    id?: number
    name: string
    value: number
    is_active?: string
    users_quantity: number
    participants?: ParticipantUncheckedCreateNestedManyWithoutRaffleInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleCreateOrConnectWithoutRaffleSkinsInput = {
    where: RaffleWhereUniqueInput
    create: XOR<RaffleCreateWithoutRaffleSkinsInput, RaffleUncheckedCreateWithoutRaffleSkinsInput>
  }

  export type SkinCreateWithoutRaffleSkinsInput = {
    name: string
    value: number
    type: string
    picture: string
  }

  export type SkinUncheckedCreateWithoutRaffleSkinsInput = {
    id?: number
    name: string
    value: number
    type: string
    picture: string
  }

  export type SkinCreateOrConnectWithoutRaffleSkinsInput = {
    where: SkinWhereUniqueInput
    create: XOR<SkinCreateWithoutRaffleSkinsInput, SkinUncheckedCreateWithoutRaffleSkinsInput>
  }

  export type ParticipantCreateWithoutRaffleSkinsInput = {
    number: number
    user: UserCreateNestedOneWithoutParticipantInput
    raffle: RaffleCreateNestedOneWithoutParticipantsInput
  }

  export type ParticipantUncheckedCreateWithoutRaffleSkinsInput = {
    id?: number
    user_id: number
    raffle_id: number
    number: number
  }

  export type ParticipantCreateOrConnectWithoutRaffleSkinsInput = {
    where: ParticipantWhereUniqueInput
    create: XOR<ParticipantCreateWithoutRaffleSkinsInput, ParticipantUncheckedCreateWithoutRaffleSkinsInput>
  }

  export type RaffleUpsertWithoutRaffleSkinsInput = {
    update: XOR<RaffleUpdateWithoutRaffleSkinsInput, RaffleUncheckedUpdateWithoutRaffleSkinsInput>
    create: XOR<RaffleCreateWithoutRaffleSkinsInput, RaffleUncheckedCreateWithoutRaffleSkinsInput>
  }

  export type RaffleUpdateWithoutRaffleSkinsInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    participants?: ParticipantUpdateManyWithoutRaffleInput
    transactions?: TransactionUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleUncheckedUpdateWithoutRaffleSkinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    participants?: ParticipantUncheckedUpdateManyWithoutRaffleInput
    transactions?: TransactionUncheckedUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SkinUpsertWithoutRaffleSkinsInput = {
    update: XOR<SkinUpdateWithoutRaffleSkinsInput, SkinUncheckedUpdateWithoutRaffleSkinsInput>
    create: XOR<SkinCreateWithoutRaffleSkinsInput, SkinUncheckedCreateWithoutRaffleSkinsInput>
  }

  export type SkinUpdateWithoutRaffleSkinsInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type SkinUncheckedUpdateWithoutRaffleSkinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
  }

  export type ParticipantUpsertWithoutRaffleSkinsInput = {
    update: XOR<ParticipantUpdateWithoutRaffleSkinsInput, ParticipantUncheckedUpdateWithoutRaffleSkinsInput>
    create: XOR<ParticipantCreateWithoutRaffleSkinsInput, ParticipantUncheckedCreateWithoutRaffleSkinsInput>
  }

  export type ParticipantUpdateWithoutRaffleSkinsInput = {
    number?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipantInput
    raffle?: RaffleUpdateOneRequiredWithoutParticipantsInput
  }

  export type ParticipantUncheckedUpdateWithoutRaffleSkinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateWithoutParticipantInput = {
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserUncheckedCreateWithoutParticipantInput = {
    id?: number
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserCreateOrConnectWithoutParticipantInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutParticipantInput, UserUncheckedCreateWithoutParticipantInput>
  }

  export type RaffleCreateWithoutParticipantsInput = {
    name: string
    value: number
    is_active?: string
    users_quantity: number
    raffleSkins?: RaffleSkinCreateNestedManyWithoutRaffleInput
    transactions?: TransactionCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleUncheckedCreateWithoutParticipantsInput = {
    id?: number
    name: string
    value: number
    is_active?: string
    users_quantity: number
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutRaffleInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleCreateOrConnectWithoutParticipantsInput = {
    where: RaffleWhereUniqueInput
    create: XOR<RaffleCreateWithoutParticipantsInput, RaffleUncheckedCreateWithoutParticipantsInput>
  }

  export type RaffleSkinCreateWithoutWinnerInput = {
    raffle: RaffleCreateNestedOneWithoutRaffleSkinsInput
    skin: SkinCreateNestedOneWithoutRaffleSkinsInput
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUncheckedCreateWithoutWinnerInput = {
    id?: number
    raffle_id: number
    skin_id: number
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinCreateOrConnectWithoutWinnerInput = {
    where: RaffleSkinWhereUniqueInput
    create: XOR<RaffleSkinCreateWithoutWinnerInput, RaffleSkinUncheckedCreateWithoutWinnerInput>
  }

  export type RaffleSkinCreateManyWinnerInputEnvelope = {
    data: Enumerable<RaffleSkinCreateManyWinnerInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutParticipantInput = {
    update: XOR<UserUpdateWithoutParticipantInput, UserUncheckedUpdateWithoutParticipantInput>
    create: XOR<UserCreateWithoutParticipantInput, UserUncheckedCreateWithoutParticipantInput>
  }

  export type UserUpdateWithoutParticipantInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    sessions?: SessionUpdateManyWithoutUserInput
    transactions?: TransactionUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutParticipantInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RaffleUpsertWithoutParticipantsInput = {
    update: XOR<RaffleUpdateWithoutParticipantsInput, RaffleUncheckedUpdateWithoutParticipantsInput>
    create: XOR<RaffleCreateWithoutParticipantsInput, RaffleUncheckedCreateWithoutParticipantsInput>
  }

  export type RaffleUpdateWithoutParticipantsInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    raffleSkins?: RaffleSkinUpdateManyWithoutRaffleInput
    transactions?: TransactionUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleUncheckedUpdateWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutRaffleInput
    transactions?: TransactionUncheckedUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleSkinUpsertWithWhereUniqueWithoutWinnerInput = {
    where: RaffleSkinWhereUniqueInput
    update: XOR<RaffleSkinUpdateWithoutWinnerInput, RaffleSkinUncheckedUpdateWithoutWinnerInput>
    create: XOR<RaffleSkinCreateWithoutWinnerInput, RaffleSkinUncheckedCreateWithoutWinnerInput>
  }

  export type RaffleSkinUpdateWithWhereUniqueWithoutWinnerInput = {
    where: RaffleSkinWhereUniqueInput
    data: XOR<RaffleSkinUpdateWithoutWinnerInput, RaffleSkinUncheckedUpdateWithoutWinnerInput>
  }

  export type RaffleSkinUpdateManyWithWhereWithoutWinnerInput = {
    where: RaffleSkinScalarWhereInput
    data: XOR<RaffleSkinUpdateManyMutationInput, RaffleSkinUncheckedUpdateManyWithoutRaffleSkinsInput>
  }

  export type RaffleSkinCreateWithoutSkinInput = {
    raffle: RaffleCreateNestedOneWithoutRaffleSkinsInput
    winner?: ParticipantCreateNestedOneWithoutRaffleSkinsInput
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUncheckedCreateWithoutSkinInput = {
    id?: number
    raffle_id: number
    winner_id?: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinCreateOrConnectWithoutSkinInput = {
    where: RaffleSkinWhereUniqueInput
    create: XOR<RaffleSkinCreateWithoutSkinInput, RaffleSkinUncheckedCreateWithoutSkinInput>
  }

  export type RaffleSkinCreateManySkinInputEnvelope = {
    data: Enumerable<RaffleSkinCreateManySkinInput>
    skipDuplicates?: boolean
  }

  export type RaffleSkinUpsertWithWhereUniqueWithoutSkinInput = {
    where: RaffleSkinWhereUniqueInput
    update: XOR<RaffleSkinUpdateWithoutSkinInput, RaffleSkinUncheckedUpdateWithoutSkinInput>
    create: XOR<RaffleSkinCreateWithoutSkinInput, RaffleSkinUncheckedCreateWithoutSkinInput>
  }

  export type RaffleSkinUpdateWithWhereUniqueWithoutSkinInput = {
    where: RaffleSkinWhereUniqueInput
    data: XOR<RaffleSkinUpdateWithoutSkinInput, RaffleSkinUncheckedUpdateWithoutSkinInput>
  }

  export type RaffleSkinUpdateManyWithWhereWithoutSkinInput = {
    where: RaffleSkinScalarWhereInput
    data: XOR<RaffleSkinUpdateManyMutationInput, RaffleSkinUncheckedUpdateManyWithoutRaffleSkinsInput>
  }

  export type UserCreateWithoutSessionsInput = {
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    Participant?: ParticipantCreateNestedManyWithoutUserInput
    transactions?: TransactionCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: number
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    Participant?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    transactions?: TransactionUncheckedCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    Participant?: ParticipantUpdateManyWithoutUserInput
    transactions?: TransactionUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    Participant?: ParticipantUncheckedUpdateManyWithoutUserInput
    transactions?: TransactionUncheckedUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserCreateWithoutTransactionsInput = {
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    Participant?: ParticipantCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserUncheckedCreateWithoutTransactionsInput = {
    id?: number
    email: string
    name: string
    password?: string | null
    phoneNumber?: string | null
    picture?: string | null
    tradeLink?: string | null
    isAdmin?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    saldo?: number | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    Participant?: ParticipantUncheckedCreateNestedManyWithoutUserInput
    twitchId?: string | null
    passwordResetToken?: string | null
    tokenExpiration?: Date | string | null
  }

  export type UserCreateOrConnectWithoutTransactionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type RaffleCreateWithoutTransactionsInput = {
    name: string
    value: number
    is_active?: string
    users_quantity: number
    participants?: ParticipantCreateNestedManyWithoutRaffleInput
    raffleSkins?: RaffleSkinCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleUncheckedCreateWithoutTransactionsInput = {
    id?: number
    name: string
    value: number
    is_active?: string
    users_quantity: number
    participants?: ParticipantUncheckedCreateNestedManyWithoutRaffleInput
    raffleSkins?: RaffleSkinUncheckedCreateNestedManyWithoutRaffleInput
    createdAt?: Date | string
    updatedAt?: Date | string
    free?: boolean | null
  }

  export type RaffleCreateOrConnectWithoutTransactionsInput = {
    where: RaffleWhereUniqueInput
    create: XOR<RaffleCreateWithoutTransactionsInput, RaffleUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpsertWithoutTransactionsInput = {
    update: XOR<UserUpdateWithoutTransactionsInput, UserUncheckedUpdateWithoutTransactionsInput>
    create: XOR<UserCreateWithoutTransactionsInput, UserUncheckedCreateWithoutTransactionsInput>
  }

  export type UserUpdateWithoutTransactionsInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    sessions?: SessionUpdateManyWithoutUserInput
    Participant?: ParticipantUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    phoneNumber?: NullableStringFieldUpdateOperationsInput | string | null
    picture?: NullableStringFieldUpdateOperationsInput | string | null
    tradeLink?: NullableStringFieldUpdateOperationsInput | string | null
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    saldo?: NullableFloatFieldUpdateOperationsInput | number | null
    sessions?: SessionUncheckedUpdateManyWithoutUserInput
    Participant?: ParticipantUncheckedUpdateManyWithoutUserInput
    twitchId?: NullableStringFieldUpdateOperationsInput | string | null
    passwordResetToken?: NullableStringFieldUpdateOperationsInput | string | null
    tokenExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type RaffleUpsertWithoutTransactionsInput = {
    update: XOR<RaffleUpdateWithoutTransactionsInput, RaffleUncheckedUpdateWithoutTransactionsInput>
    create: XOR<RaffleCreateWithoutTransactionsInput, RaffleUncheckedCreateWithoutTransactionsInput>
  }

  export type RaffleUpdateWithoutTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    participants?: ParticipantUpdateManyWithoutRaffleInput
    raffleSkins?: RaffleSkinUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type RaffleUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    is_active?: StringFieldUpdateOperationsInput | string
    users_quantity?: IntFieldUpdateOperationsInput | number
    participants?: ParticipantUncheckedUpdateManyWithoutRaffleInput
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutRaffleInput
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    free?: NullableBoolFieldUpdateOperationsInput | boolean | null
  }

  export type SessionCreateManyUserInput = {
    id?: number
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ParticipantCreateManyUserInput = {
    id?: number
    raffle_id: number
    number: number
  }

  export type TransactionCreateManyUserInput = {
    id?: number
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    raffle_id?: number | null
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type SessionUpdateWithoutUserInput = {
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ParticipantUpdateWithoutUserInput = {
    number?: IntFieldUpdateOperationsInput | number
    raffle?: RaffleUpdateOneRequiredWithoutParticipantsInput
    raffleSkins?: RaffleSkinUpdateManyWithoutWinnerInput
  }

  export type ParticipantUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutWinnerInput
  }

  export type ParticipantUncheckedUpdateManyWithoutParticipantInput = {
    id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionUpdateWithoutUserInput = {
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    raffle?: RaffleUpdateOneWithoutTransactionsInput
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    raffle_id?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateManyWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    raffle_id?: NullableIntFieldUpdateOperationsInput | number | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ParticipantCreateManyRaffleInput = {
    id?: number
    user_id: number
    number: number
  }

  export type RaffleSkinCreateManyRaffleInput = {
    id?: number
    skin_id: number
    winner_id?: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type TransactionCreateManyRaffleInput = {
    id?: number
    user_id: number
    paymentId?: string | null
    status: string
    status_detail?: string | null
    paymentMethod: string
    transactionAmount: number
    dateCreated?: Date | string
    dateApproved?: Date | string | null
    dateLastUpdated?: Date | string
    type: string
    qrCode?: string | null
    qrCodeBase64?: string | null
  }

  export type ParticipantUpdateWithoutRaffleInput = {
    number?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutParticipantInput
    raffleSkins?: RaffleSkinUpdateManyWithoutWinnerInput
  }

  export type ParticipantUncheckedUpdateWithoutRaffleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
    raffleSkins?: RaffleSkinUncheckedUpdateManyWithoutWinnerInput
  }

  export type ParticipantUncheckedUpdateManyWithoutParticipantsInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    number?: IntFieldUpdateOperationsInput | number
  }

  export type RaffleSkinUpdateWithoutRaffleInput = {
    skin?: SkinUpdateOneRequiredWithoutRaffleSkinsInput
    winner?: ParticipantUpdateOneWithoutRaffleSkinsInput
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinUncheckedUpdateWithoutRaffleInput = {
    id?: IntFieldUpdateOperationsInput | number
    skin_id?: IntFieldUpdateOperationsInput | number
    winner_id?: NullableIntFieldUpdateOperationsInput | number | null
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinUncheckedUpdateManyWithoutRaffleSkinsInput = {
    id?: IntFieldUpdateOperationsInput | number
    skin_id?: IntFieldUpdateOperationsInput | number
    winner_id?: NullableIntFieldUpdateOperationsInput | number | null
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionUpdateWithoutRaffleInput = {
    user?: UserUpdateOneRequiredWithoutTransactionsInput
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TransactionUncheckedUpdateWithoutRaffleInput = {
    id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    status_detail?: NullableStringFieldUpdateOperationsInput | string | null
    paymentMethod?: StringFieldUpdateOperationsInput | string
    transactionAmount?: FloatFieldUpdateOperationsInput | number
    dateCreated?: DateTimeFieldUpdateOperationsInput | Date | string
    dateApproved?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dateLastUpdated?: DateTimeFieldUpdateOperationsInput | Date | string
    type?: StringFieldUpdateOperationsInput | string
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    qrCodeBase64?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RaffleSkinCreateManyWinnerInput = {
    id?: number
    raffle_id: number
    skin_id: number
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUpdateWithoutWinnerInput = {
    raffle?: RaffleUpdateOneRequiredWithoutRaffleSkinsInput
    skin?: SkinUpdateOneRequiredWithoutRaffleSkinsInput
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinUncheckedUpdateWithoutWinnerInput = {
    id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    skin_id?: IntFieldUpdateOperationsInput | number
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinCreateManySkinInput = {
    id?: number
    raffle_id: number
    winner_id?: number | null
    skinName: string
    skinValue: number
    skinType: string
    skinPicture: string
  }

  export type RaffleSkinUpdateWithoutSkinInput = {
    raffle?: RaffleUpdateOneRequiredWithoutRaffleSkinsInput
    winner?: ParticipantUpdateOneWithoutRaffleSkinsInput
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }

  export type RaffleSkinUncheckedUpdateWithoutSkinInput = {
    id?: IntFieldUpdateOperationsInput | number
    raffle_id?: IntFieldUpdateOperationsInput | number
    winner_id?: NullableIntFieldUpdateOperationsInput | number | null
    skinName?: StringFieldUpdateOperationsInput | string
    skinValue?: FloatFieldUpdateOperationsInput | number
    skinType?: StringFieldUpdateOperationsInput | string
    skinPicture?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}