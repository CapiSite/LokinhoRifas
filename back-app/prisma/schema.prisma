generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String       @unique
  password    String?
  phoneNumber String?
  picture     String?
  tradeLink   String?
  isAdmin     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  saldo       Float?        @default(0.0)
  sessions    Session[]
  Participant Participant[]
  transactions Transaction[]   // Adicione este campo

  twitchId   String? @unique

  passwordResetToken  String?      // Token para reset de senha
  tokenExpiration     DateTime?    // Data de expiração do token

  @@map("user")
}

model Raffle {
  id             Int           @id @default(autoincrement())
  name           String        // Nome da rifa
  value          Float
  is_active      String        @default("Em espera")
  users_quantity Int        
  participants   Participant[]
  raffleSkins    RaffleSkin[]
  transactions   Transaction[] @relation("RaffleTransactions") // Relação inversa com o modelo Transaction
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  free           Boolean?        @default(false)

  @@map("raffle")
}

model RaffleSkin {
  id        Int      @id @default(autoincrement())
  raffle_id Int
  raffle    Raffle   @relation(fields: [raffle_id], references: [id])
  skin_id   Int
  skin      Skin     @relation(fields: [skin_id], references: [id])
  
  winner    Participant?    @relation(fields: [winner_id], references: [id])
  winner_id Int?

  skinName  String
  skinValue Float
  skinType  String
  skinPicture String

  @@map("raffleSkin")
}

model Participant {
  id        Int    @id @default(autoincrement())
  user_id   Int
  raffle_id Int
  number    Int
  user      User   @relation(fields: [user_id], references: [id])
  raffle    Raffle @relation(fields: [raffle_id], references: [id])

  raffleSkins RaffleSkin[]   // Adicione este campo

  @@map("participant")
}

model Skin {
  id      Int      @id @default(autoincrement())
  name    String
  value   Float
  type    String
  picture String
  raffleSkins RaffleSkin[]

  @@map("skin")
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String
  user_id   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [user_id], references: [id])

  @@map("session")
}

model Transaction {
  id                Int       @id @default(autoincrement())
  user              User      @relation(fields: [user_id], references: [id])
  user_id           Int
  paymentId         String?   @unique // Agora pode ser opcional para transações internas
  status            String
  status_detail     String?
  paymentMethod     String
  transactionAmount Float
  dateCreated       DateTime  @default(now())
  dateApproved      DateTime?
  dateLastUpdated   DateTime  @updatedAt
  type              String    // 'credit' para adicionar saldo, 'debit' para gastar saldo
  raffle_id         Int?      // Relação opcional com a rifa, se a transação for relacionada a uma rifa
  raffle            Raffle?   @relation(fields: [raffle_id], references: [id], name: "RaffleTransactions") // Nome da relação para corresponder ao modelo Raffle

  qrCode            String?   // Armazena o QR code para pagamentos Pix
  qrCodeBase64      String?   // Armazena o QR code em formato base64 para exibir como imagem

  @@map("transaction")
}


model Text {
  id        Int    @id @default(autoincrement())
  text      String

  @@map("text")
}